
tp3-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00000c18  00000cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008001b2  008001b2  00000d5e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001945  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d19  00000000  00000000  00002901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2c  00000000  00000000  0000361a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00004248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082c  00000000  00000000  000046d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5e  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_18>
  4c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3b       	cpi	r26, 0xB2	; 178
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 eb       	ldi	r26, 0xB2	; 178
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  9e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_startSignal_y_respuesta>:
#define DHT11_PORT PORTC
#define DHT11_PIN_INPUT PINC


void DHT11_startSignal_y_respuesta(){
	DDRC |= (1<<PORTC0);  //Configurar como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<PORTC0);  //Poner en valor bajo
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 ee       	ldi	r24, 0xE0	; 224
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_startSignal_y_respuesta+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_startSignal_y_respuesta+0x1c>
  c2:	00 00       	nop
	_delay_ms(18); // delay de al menos 18ms
	
	
	DDRC &=~(1<<PORTC0);  // Configurar como entrada
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC |=(1<<PORTC0);  // Poner en alto la señal
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	88 b9       	out	0x08, r24	; 8
	
	while(PINC & (1<<PINC0));// Esperar que el sensor ponga en bajo la señal
  d0:	30 99       	sbic	0x06, 0	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <DHT11_startSignal_y_respuesta+0x2a>
	while((PINC & (1<<PINC0))==0);//Esperar que el sensor ponga en alto la señal
  d4:	30 9b       	sbis	0x06, 0	; 6
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <DHT11_startSignal_y_respuesta+0x2e>
}
  d8:	08 95       	ret

000000da <DHT11_bits>:


uint8_t DHT11_bits(){
	int cant;
	uint8_t i;
	uint8_t valor=0;
  da:	80 e0       	ldi	r24, 0x00	; 0
	for(i=0; i<8; i++){
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	19 c0       	rjmp	.+50     	; 0x112 <DHT11_bits+0x38>
		cant=0;  //cantidad de us transcurridos
		while(PINC & (1<<PINC0));  //Esperar que el sensor ponga en bajo la señal
  e0:	30 99       	sbic	0x06, 0	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <DHT11_bits+0x6>
// 			_delay_us(1);
// 		else //sino es un "1"
// 			valor |= (1 << (7 - i));

		//Esperar q se ponga en alto
		while (!(DHT11_PIN_INPUT & (1 << DHT11_PIN)));
  e4:	30 9b       	sbis	0x06, 0	; 6
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <DHT11_bits+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2a e9       	ldi	r18, 0x9A	; 154
  ea:	2a 95       	dec	r18
  ec:	f1 f7       	brne	.-4      	; 0xea <DHT11_bits+0x10>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <DHT11_bits+0x16>
		// Si despues de 40 us esta:
		// -En alto: bit = 1
		// -En bajo: bit = 0
		
		//Si esta en alto
		if (DHT11_PIN_INPUT & (1 << DHT11_PIN)) {
  f0:	30 9b       	sbis	0x06, 0	; 6
  f2:	0e c0       	rjmp	.+28     	; 0x110 <DHT11_bits+0x36>
			valor |= (1 << (7 - i)); // Establece el bit 'i' en 1
  f4:	47 e0       	ldi	r20, 0x07	; 7
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	49 1b       	sub	r20, r25
  fa:	51 09       	sbc	r21, r1
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DHT11_bits+0x2c>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	4a 95       	dec	r20
 108:	e2 f7       	brpl	.-8      	; 0x102 <DHT11_bits+0x28>
 10a:	82 2b       	or	r24, r18
			//_delay_us(30);
			//Esperar q se ponga en bajo
			while ((DHT11_PIN_INPUT & (1 << DHT11_PIN)));
 10c:	30 99       	sbic	0x06, 0	; 6
 10e:	fe cf       	rjmp	.-4      	; 0x10c <DHT11_bits+0x32>

uint8_t DHT11_bits(){
	int cant;
	uint8_t i;
	uint8_t valor=0;
	for(i=0; i<8; i++){
 110:	9f 5f       	subi	r25, 0xFF	; 255
 112:	98 30       	cpi	r25, 0x08	; 8
 114:	28 f3       	brcs	.-54     	; 0xe0 <DHT11_bits+0x6>
			//Esperar q se ponga en bajo
			while ((DHT11_PIN_INPUT & (1 << DHT11_PIN)));
		}
	}
	return valor;
}
 116:	08 95       	ret

00000118 <DHT11_obtenerDatos>:

void DHT11_obtenerDatos(uint8_t *temperatura,uint8_t *temperatura_decimal, uint8_t *humedad, uint8_t *humedad_decimal){
 118:	cf 92       	push	r12
 11a:	df 92       	push	r13
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8c 01       	movw	r16, r24
 12a:	eb 01       	movw	r28, r22
 12c:	6a 01       	movw	r12, r20
 12e:	79 01       	movw	r14, r18
	uint8_t sum=0;

	DHT11_startSignal_y_respuesta();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_startSignal_y_respuesta>
	
// 	*humedad=BcdToDec(DHT11_bits());
// 	*humedad_decimal=BcdToDec(DHT11_bits());
// 	*temperatura=BcdToDec(DHT11_bits());
// 	*temperatura_decimal=BcdToDec(DHT11_bits());
	*humedad=DHT11_bits();
 134:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 138:	f6 01       	movw	r30, r12
 13a:	80 83       	st	Z, r24
	*humedad_decimal=DHT11_bits();
 13c:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 140:	f7 01       	movw	r30, r14
 142:	80 83       	st	Z, r24
	*temperatura=DHT11_bits();
 144:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 148:	f8 01       	movw	r30, r16
 14a:	80 83       	st	Z, r24
	*temperatura_decimal=DHT11_bits();
 14c:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 150:	88 83       	st	Y, r24
	sum=DHT11_bits();
 152:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	df 90       	pop	r13
 164:	cf 90       	pop	r12
 166:	08 95       	ret

00000168 <I2C_Init>:
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
	*day = I2C_Read_Ack();
	*month = I2C_Read_Ack();
	*year = I2C_Read_Ack();
	I2C_Stop();
}
 168:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 16c:	87 e4       	ldi	r24, 0x47	; 71
 16e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 178:	08 95       	ret

0000017a <I2C_Start>:
 17a:	84 ea       	ldi	r24, 0xA4	; 164
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <I2C_Start+0x6>
 188:	08 95       	ret

0000018a <I2C_Stop>:
 18a:	84 e9       	ldi	r24, 0x94	; 148
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 190:	08 95       	ret

00000192 <I2C_Write>:
 192:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 196:	84 e8       	ldi	r24, 0x84	; 132
 198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	88 23       	and	r24, r24
 1a2:	e4 f7       	brge	.-8      	; 0x19c <I2C_Write+0xa>
 1a4:	08 95       	ret

000001a6 <I2C_Read_Ack>:
 1a6:	84 ec       	ldi	r24, 0xC4	; 196
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b0:	88 23       	and	r24, r24
 1b2:	e4 f7       	brge	.-8      	; 0x1ac <I2C_Read_Ack+0x6>
 1b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1b8:	08 95       	ret

000001ba <I2C_Read_NAck>:
 1ba:	84 e8       	ldi	r24, 0x84	; 132
 1bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c4:	88 23       	and	r24, r24
 1c6:	e4 f7       	brge	.-8      	; 0x1c0 <I2C_Read_NAck+0x6>
 1c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1cc:	08 95       	ret

000001ce <DecToBcd>:
 1ce:	9d ec       	ldi	r25, 0xCD	; 205
 1d0:	89 9f       	mul	r24, r25
 1d2:	91 2d       	mov	r25, r1
 1d4:	11 24       	eor	r1, r1
 1d6:	96 95       	lsr	r25
 1d8:	96 95       	lsr	r25
 1da:	96 95       	lsr	r25
 1dc:	39 2f       	mov	r19, r25
 1de:	33 0f       	add	r19, r19
 1e0:	23 2f       	mov	r18, r19
 1e2:	22 0f       	add	r18, r18
 1e4:	22 0f       	add	r18, r18
 1e6:	23 0f       	add	r18, r19
 1e8:	82 1b       	sub	r24, r18
 1ea:	20 e1       	ldi	r18, 0x10	; 16
 1ec:	92 9f       	mul	r25, r18
 1ee:	80 0d       	add	r24, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	08 95       	ret

000001f4 <BcdToDec>:
 1f4:	98 2f       	mov	r25, r24
 1f6:	92 95       	swap	r25
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	99 0f       	add	r25, r25
 1fc:	29 2f       	mov	r18, r25
 1fe:	22 0f       	add	r18, r18
 200:	22 0f       	add	r18, r18
 202:	92 0f       	add	r25, r18
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	89 0f       	add	r24, r25
 208:	08 95       	ret

0000020a <DS3231_GetClock>:

void DS3231_GetClock(uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year){
 20a:	6f 92       	push	r6
 20c:	7f 92       	push	r7
 20e:	8f 92       	push	r8
 210:	9f 92       	push	r9
 212:	af 92       	push	r10
 214:	bf 92       	push	r11
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
 228:	5b 01       	movw	r10, r22
 22a:	4a 01       	movw	r8, r20
 22c:	39 01       	movw	r6, r18
	I2C_Start();
 22e:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 232:	80 ed       	ldi	r24, 0xD0	; 208
 234:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(0x00);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Start();
 23e:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 242:	81 ed       	ldi	r24, 0xD1	; 209
 244:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	*second = BcdToDec(I2C_Read_Ack());
 248:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Read_Ack>
 24c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BcdToDec>
 250:	f4 01       	movw	r30, r8
 252:	80 83       	st	Z, r24
	*minute = BcdToDec(I2C_Read_Ack());
 254:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Read_Ack>
 258:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BcdToDec>
 25c:	f5 01       	movw	r30, r10
 25e:	80 83       	st	Z, r24
	*hour = BcdToDec(I2C_Read_Ack());
 260:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Read_Ack>
 264:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BcdToDec>
 268:	88 83       	st	Y, r24
	*day = BcdToDec(I2C_Read_Ack());
 26a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Read_Ack>
 26e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BcdToDec>
 272:	f3 01       	movw	r30, r6
 274:	80 83       	st	Z, r24
	*date = BcdToDec(I2C_Read_Ack());
 276:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Read_Ack>
 27a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BcdToDec>
 27e:	f8 01       	movw	r30, r16
 280:	80 83       	st	Z, r24
	*month = BcdToDec(I2C_Read_Ack());
 282:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Read_Ack>
 286:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BcdToDec>
 28a:	f7 01       	movw	r30, r14
 28c:	80 83       	st	Z, r24
	*year = BcdToDec(I2C_Read_NAck());
 28e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_NAck>
 292:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BcdToDec>
 296:	f6 01       	movw	r30, r12
 298:	80 83       	st	Z, r24
	I2C_Stop();
 29a:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Stop>
	
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	bf 90       	pop	r11
 2b0:	af 90       	pop	r10
 2b2:	9f 90       	pop	r9
 2b4:	8f 90       	pop	r8
 2b6:	7f 90       	pop	r7
 2b8:	6f 90       	pop	r6
 2ba:	08 95       	ret

000002bc <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t hour, uint8_t minute, uint8_t second, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
 2bc:	cf 92       	push	r12
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	d8 2f       	mov	r29, r24
 2cc:	16 2f       	mov	r17, r22
 2ce:	f4 2e       	mov	r15, r20
 2d0:	c2 2f       	mov	r28, r18
	I2C_Start();
 2d2:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 2d6:	80 ed       	ldi	r24, 0xD0	; 208
 2d8:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(0x00); // Start from register 0x00
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(DecToBcd(second));
 2e2:	8f 2d       	mov	r24, r15
 2e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DecToBcd>
 2e8:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(DecToBcd(minute));
 2ec:	81 2f       	mov	r24, r17
 2ee:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DecToBcd>
 2f2:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(DecToBcd(hour));
 2f6:	8d 2f       	mov	r24, r29
 2f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DecToBcd>
 2fc:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(DecToBcd(day)); // Weekday register (not used)
 300:	8c 2f       	mov	r24, r28
 302:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DecToBcd>
 306:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(DecToBcd(date)); // Weekday register (not used)
 30a:	80 2f       	mov	r24, r16
 30c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DecToBcd>
 310:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(DecToBcd(month));
 314:	8e 2d       	mov	r24, r14
 316:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DecToBcd>
 31a:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Write(DecToBcd(year));
 31e:	8c 2d       	mov	r24, r12
 320:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DecToBcd>
 324:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Write>
	I2C_Stop();
 328:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Stop>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	cf 90       	pop	r12
 33a:	08 95       	ret

0000033c <main>:
static char novalido[] = "Comando no valido\n\r";
volatile int comando_anterior;

int main(void){

	UART_init();   // Inicializar UART
 33c:	0e 94 9e 02 	call	0x53c	; 0x53c <UART_init>
	sei();         // Activar máscara de interrupciones
 340:	78 94       	sei
	
	UART_sendString(bienvenida); // Enviar mensaje de inicio/bienvenida
 342:	84 e1       	ldi	r24, 0x14	; 20
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 a8 02 	call	0x550	; 0x550 <UART_sendString>
	// Set the desired time: hours, minutes, seconds
	//DS3231_SetTime(14, 30, 0); // 14:30:00 (2:30 PM)

	// Set the desired date: day, date, month, year
	//DS3231_SetDate(1, 9, 6, 24); // Monday, 09 June 2024 (1 for Monday, 0 for Sunday)
	I2C_Init();
 34a:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Init>
	DS3231_SetDateTime(14, 30, 45, 4, 12, 6, 24); // Establece la hora a 14:30:45 y la fecha a 12/06/2024
 34e:	0f 2e       	mov	r0, r31
 350:	f8 e1       	ldi	r31, 0x18	; 24
 352:	cf 2e       	mov	r12, r31
 354:	f0 2d       	mov	r31, r0
 356:	0f 2e       	mov	r0, r31
 358:	f6 e0       	ldi	r31, 0x06	; 6
 35a:	ef 2e       	mov	r14, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	0c e0       	ldi	r16, 0x0C	; 12
 360:	24 e0       	ldi	r18, 0x04	; 4
 362:	4d e2       	ldi	r20, 0x2D	; 45
 364:	6e e1       	ldi	r22, 0x1E	; 30
 366:	8e e0       	ldi	r24, 0x0E	; 14
 368:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DS3231_SetDateTime>
	while (1){
		if (UART_hayComando()) {
 36c:	0e 94 c4 02 	call	0x588	; 0x588 <UART_hayComando>
 370:	88 23       	and	r24, r24
 372:	c1 f0       	breq	.+48     	; 0x3a4 <main+0x68>
			char comando = UART_getComando();
 374:	0e 94 ca 02 	call	0x594	; 0x594 <UART_getComando>
			if (comando == 's') {
 378:	83 37       	cpi	r24, 0x73	; 115
 37a:	39 f4       	brne	.+14     	; 0x38a <main+0x4e>
				transmision_activa = 1; // Reanudar transmisión
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <transmision_activa+0x1>
 384:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <transmision_activa>
 388:	0b c0       	rjmp	.+22     	; 0x3a0 <main+0x64>
				} else if (comando == 'S') {
 38a:	83 35       	cpi	r24, 0x53	; 83
 38c:	29 f4       	brne	.+10     	; 0x398 <main+0x5c>
				transmision_activa = 0; // Detener transmisión
 38e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <transmision_activa+0x1>
 392:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <transmision_activa>
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <main+0x64>
				} else {
				UART_sendString(novalido); // Enviar mensaje de comando no válido
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 a8 02 	call	0x550	; 0x550 <UART_sendString>
			}
			UART_setHayComando(); // Avisar que el comando ya fue procesado
 3a0:	0e 94 c7 02 	call	0x58e	; 0x58e <UART_setHayComando>
		}

		if (transmision_activa) {
 3a4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <transmision_activa>
 3a8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <transmision_activa+0x1>
 3ac:	89 2b       	or	r24, r25
 3ae:	f1 f2       	breq	.-68     	; 0x36c <main+0x30>
			Terminal_sendDatos();  // Obtener y enviar datos del sensor
 3b0:	0e 94 0f 02 	call	0x41e	; 0x41e <Terminal_sendDatos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	87 ea       	ldi	r24, 0xA7	; 167
 3b8:	91 e6       	ldi	r25, 0x61	; 97
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x7e>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x88>
 3c4:	00 00       	nop
 3c6:	d2 cf       	rjmp	.-92     	; 0x36c <main+0x30>

000003c8 <SerialPort_Init>:
 3c8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3cc:	96 e0       	ldi	r25, 0x06	; 6
 3ce:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3da:	08 95       	ret

000003dc <SerialPort_TX_Enable>:
 3dc:	e1 ec       	ldi	r30, 0xC1	; 193
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	80 83       	st	Z, r24
 3e6:	08 95       	ret

000003e8 <SerialPort_TX_Interrupt_Enable>:
 3e8:	e1 ec       	ldi	r30, 0xC1	; 193
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	80 83       	st	Z, r24
 3f2:	08 95       	ret

000003f4 <SerialPort_TX_Interrupt_Disable>:
 3f4:	e1 ec       	ldi	r30, 0xC1	; 193
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	8f 7d       	andi	r24, 0xDF	; 223
 3fc:	80 83       	st	Z, r24
 3fe:	08 95       	ret

00000400 <SerialPort_RX_Enable>:
 400:	e1 ec       	ldi	r30, 0xC1	; 193
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	80 61       	ori	r24, 0x10	; 16
 408:	80 83       	st	Z, r24
 40a:	08 95       	ret

0000040c <SerialPort_RX_Interrupt_Enable>:
 40c:	e1 ec       	ldi	r30, 0xC1	; 193
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	80 68       	ori	r24, 0x80	; 128
 414:	80 83       	st	Z, r24
 416:	08 95       	ret

00000418 <SerialPort_Send_Data>:
 418:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 41c:	08 95       	ret

0000041e <Terminal_sendDatos>:
		return 2;// Comando no válido
	}
}


void Terminal_sendDatos(){
 41e:	cf 92       	push	r12
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	cf 56       	subi	r28, 0x6F	; 111
 434:	d1 09       	sbc	r29, r1
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
	//char temperaturayhumedad[50]; // Ampliamos el tamaño del buffer para dar espacio a la fecha y hora
	char dataBuffer[100];
	uint8_t humedad, humedad_decimal, temperatura_decimal, temperatura = 0;
 440:	a9 96       	adiw	r28, 0x29	; 41
 442:	1f ae       	std	Y+63, r1	; 0x3f
 444:	a9 97       	sbiw	r28, 0x29	; 41
	uint8_t hours, minutes, seconds;
	uint8_t day, date, month, year;
	DHT11_obtenerDatos(&temperatura, &temperatura_decimal, &humedad, &humedad_decimal);
 446:	9e 01       	movw	r18, r28
 448:	2a 59       	subi	r18, 0x9A	; 154
 44a:	3f 4f       	sbci	r19, 0xFF	; 255
 44c:	ae 01       	movw	r20, r28
 44e:	4b 59       	subi	r20, 0x9B	; 155
 450:	5f 4f       	sbci	r21, 0xFF	; 255
 452:	be 01       	movw	r22, r28
 454:	69 59       	subi	r22, 0x99	; 153
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	ce 01       	movw	r24, r28
 45a:	88 59       	subi	r24, 0x98	; 152
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	0e 94 8c 00 	call	0x118	; 0x118 <DHT11_obtenerDatos>
	// Obtain date from DS3231
	//DS3231_GetDate(&day, &date, &month, &year);
	//DS3231_GetDate(&date, &month, &year);
	// Obtener datos del sensor y formatearlos
	
	DS3231_GetClock(&hours, &minutes, &seconds, &day, &date, &month, &year);
 462:	ce 01       	movw	r24, r28
 464:	81 59       	subi	r24, 0x91	; 145
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	6c 01       	movw	r12, r24
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	7c 01       	movw	r14, r24
 46e:	8e 01       	movw	r16, r28
 470:	03 59       	subi	r16, 0x93	; 147
 472:	1f 4f       	sbci	r17, 0xFF	; 255
 474:	9e 01       	movw	r18, r28
 476:	24 59       	subi	r18, 0x94	; 148
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	ae 01       	movw	r20, r28
 47c:	45 59       	subi	r20, 0x95	; 149
 47e:	5f 4f       	sbci	r21, 0xFF	; 255
 480:	be 01       	movw	r22, r28
 482:	66 59       	subi	r22, 0x96	; 150
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	05 97       	sbiw	r24, 0x05	; 5
 488:	0e 94 05 01 	call	0x20a	; 0x20a <DS3231_GetClock>
	
	if (humedad > 100)
 48c:	a6 96       	adiw	r28, 0x26	; 38
 48e:	8f ad       	ldd	r24, Y+63	; 0x3f
 490:	a6 97       	sbiw	r28, 0x26	; 38
 492:	85 36       	cpi	r24, 0x65	; 101
 494:	20 f0       	brcs	.+8      	; 0x49e <Terminal_sendDatos+0x80>
	{
		humedad = humedad - 100;
 496:	84 56       	subi	r24, 0x64	; 100
 498:	a6 96       	adiw	r28, 0x26	; 38
 49a:	8f af       	std	Y+63, r24	; 0x3f
 49c:	a6 97       	sbiw	r28, 0x26	; 38
	}
	
	temperatura = temperatura*2;
 49e:	a9 96       	adiw	r28, 0x29	; 41
 4a0:	8f ad       	ldd	r24, Y+63	; 0x3f
 4a2:	a9 97       	sbiw	r28, 0x29	; 41
 4a4:	88 0f       	add	r24, r24
 4a6:	a9 96       	adiw	r28, 0x29	; 41
 4a8:	8f af       	std	Y+63, r24	; 0x3f
 4aa:	a9 97       	sbiw	r28, 0x29	; 41
	
	sprintf(dataBuffer, "TEMP: %d.0 °C HUM: %d.0%% FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n",
 4ac:	ac 96       	adiw	r28, 0x2c	; 44
 4ae:	9f ad       	ldd	r25, Y+63	; 0x3f
 4b0:	ac 97       	sbiw	r28, 0x2c	; 44
 4b2:	1f 92       	push	r1
 4b4:	9f 93       	push	r25
 4b6:	ab 96       	adiw	r28, 0x2b	; 43
 4b8:	9f ad       	ldd	r25, Y+63	; 0x3f
 4ba:	ab 97       	sbiw	r28, 0x2b	; 43
 4bc:	1f 92       	push	r1
 4be:	9f 93       	push	r25
 4c0:	aa 96       	adiw	r28, 0x2a	; 42
 4c2:	9f ad       	ldd	r25, Y+63	; 0x3f
 4c4:	aa 97       	sbiw	r28, 0x2a	; 42
 4c6:	1f 92       	push	r1
 4c8:	9f 93       	push	r25
 4ca:	e0 96       	adiw	r28, 0x30	; 48
 4cc:	9f ad       	ldd	r25, Y+63	; 0x3f
 4ce:	e0 97       	sbiw	r28, 0x30	; 48
 4d0:	1f 92       	push	r1
 4d2:	9f 93       	push	r25
 4d4:	af 96       	adiw	r28, 0x2f	; 47
 4d6:	9f ad       	ldd	r25, Y+63	; 0x3f
 4d8:	af 97       	sbiw	r28, 0x2f	; 47
 4da:	1f 92       	push	r1
 4dc:	9f 93       	push	r25
 4de:	ae 96       	adiw	r28, 0x2e	; 46
 4e0:	9f ad       	ldd	r25, Y+63	; 0x3f
 4e2:	ae 97       	sbiw	r28, 0x2e	; 46
 4e4:	1f 92       	push	r1
 4e6:	9f 93       	push	r25
 4e8:	a6 96       	adiw	r28, 0x26	; 38
 4ea:	9f ad       	ldd	r25, Y+63	; 0x3f
 4ec:	a6 97       	sbiw	r28, 0x26	; 38
 4ee:	1f 92       	push	r1
 4f0:	9f 93       	push	r25
 4f2:	1f 92       	push	r1
 4f4:	8f 93       	push	r24
 4f6:	8b e6       	ldi	r24, 0x6B	; 107
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	9f 93       	push	r25
 4fc:	8f 93       	push	r24
 4fe:	8e 01       	movw	r16, r28
 500:	0f 5f       	subi	r16, 0xFF	; 255
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	1f 93       	push	r17
 506:	0f 93       	push	r16
 508:	0e 94 20 03 	call	0x640	; 0x640 <sprintf>
	temperatura, humedad, date, month, year, hours, minutes, seconds);


	// Send the formatted string over UART
	UART_sendString(dataBuffer);
 50c:	c8 01       	movw	r24, r16
 50e:	0e 94 a8 02 	call	0x550	; 0x550 <UART_sendString>
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	c1 59       	subi	r28, 0x91	; 145
 51e:	df 4f       	sbci	r29, 0xFF	; 255
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	f8 94       	cli
 524:	de bf       	out	0x3e, r29	; 62
 526:	0f be       	out	0x3f, r0	; 63
 528:	cd bf       	out	0x3d, r28	; 61
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	08 95       	ret

0000053c <UART_init>:
volatile unsigned char nuevoDato = 0;

static int nuevoComando = 0;

void UART_init(){
	SerialPort_Init(0x67); // inicializar puerto serie
 53c:	87 e6       	ldi	r24, 0x67	; 103
 53e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SerialPort_Init>
	SerialPort_TX_Enable(); // habilitar transmisor TX
 542:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SerialPort_TX_Enable>
	SerialPort_RX_Enable(); // habilitar receptor RX
 546:	0e 94 00 02 	call	0x400	; 0x400 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepción
 54a:	0e 94 06 02 	call	0x40c	; 0x40c <SerialPort_RX_Interrupt_Enable>
 54e:	08 95       	ret

00000550 <UART_sendString>:
}

void UART_sendString(char* s){
 550:	ac 01       	movw	r20, r24
	unsigned char indice = 0;
 552:	20 e0       	ldi	r18, 0x00	; 0
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 554:	0d c0       	rjmp	.+26     	; 0x570 <UART_sendString+0x20>
		if(TX_indiceescritura < 105){ // si el índice es menor al tamaño máximo del buffer
 556:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <TX_indiceescritura>
 55a:	99 36       	cpi	r25, 0x69	; 105
 55c:	40 f4       	brcc	.+16     	; 0x56e <UART_sendString+0x1e>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar carácter en buffer
 55e:	e9 2f       	mov	r30, r25
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	eb 54       	subi	r30, 0x4B	; 75
 564:	fe 4f       	sbci	r31, 0xFE	; 254
 566:	30 83       	st	Z, r19
			TX_indiceescritura++;
 568:	9f 5f       	subi	r25, 0xFF	; 255
 56a:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <TX_indiceescritura>
		}
		indice++;
 56e:	2f 5f       	subi	r18, 0xFF	; 255
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepción
}

void UART_sendString(char* s){
	unsigned char indice = 0;
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 570:	fa 01       	movw	r30, r20
 572:	e2 0f       	add	r30, r18
 574:	f1 1d       	adc	r31, r1
 576:	30 81       	ld	r19, Z
 578:	31 11       	cpse	r19, r1
 57a:	ed cf       	rjmp	.-38     	; 0x556 <UART_sendString+0x6>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar carácter en buffer
			TX_indiceescritura++;
		}
		indice++;
	}
	hayString = 1; // Activo flag
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <hayString>
	SerialPort_TX_Interrupt_Enable(); // Activo interrupción de transmisión
 582:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SerialPort_TX_Interrupt_Enable>
 586:	08 95       	ret

00000588 <UART_hayComando>:
}

char UART_hayComando(){
	return nuevoDato; // Retorna si hay un nuevo dato recibido
 588:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
}
 58c:	08 95       	ret

0000058e <UART_setHayComando>:

void UART_setHayComando(){
	nuevoDato = 0; // Resetear bandera de nuevo dato
 58e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <__data_end>
 592:	08 95       	ret

00000594 <UART_getComando>:
}

char UART_getComando(){
	return RX_Buffer; // Retorna el carácter recibido
 594:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <RX_Buffer>
}
 598:	08 95       	ret

0000059a <__vector_18>:

ISR(USART_RX_vect){
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	8f 93       	push	r24
	RX_Buffer = UDR0; // Leer el dato recibido
 5a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5aa:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <RX_Buffer>
	nuevoDato = 1; // Indicar que hay un nuevo dato
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <__data_end>
}
 5b4:	8f 91       	pop	r24
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <__vector_19>:

ISR(USART_UDRE_vect){
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	2f 93       	push	r18
 5cc:	3f 93       	push	r19
 5ce:	4f 93       	push	r20
 5d0:	5f 93       	push	r21
 5d2:	6f 93       	push	r22
 5d4:	7f 93       	push	r23
 5d6:	8f 93       	push	r24
 5d8:	9f 93       	push	r25
 5da:	af 93       	push	r26
 5dc:	bf 93       	push	r27
 5de:	ef 93       	push	r30
 5e0:	ff 93       	push	r31
	if(hayString){ // Si hay cadena para transmitir
 5e2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <hayString>
 5e6:	88 23       	and	r24, r24
 5e8:	d1 f0       	breq	.+52     	; 0x61e <__vector_19+0x5e>
		if (TX_indicelectura < TX_indiceescritura){ // Si sigue habiendo datos
 5ea:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <TX_indicelectura>
 5ee:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <TX_indiceescritura>
 5f2:	e8 17       	cp	r30, r24
 5f4:	60 f4       	brcc	.+24     	; 0x60e <__vector_19+0x4e>
			SerialPort_Send_Data(TX_Buffer[TX_indicelectura]); // Enviar dato
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	eb 54       	subi	r30, 0x4B	; 75
 5fa:	fe 4f       	sbci	r31, 0xFE	; 254
 5fc:	80 81       	ld	r24, Z
 5fe:	0e 94 0c 02 	call	0x418	; 0x418 <SerialPort_Send_Data>
			TX_indicelectura++;
 602:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <TX_indicelectura>
 606:	8f 5f       	subi	r24, 0xFF	; 255
 608:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <TX_indicelectura>
 60c:	08 c0       	rjmp	.+16     	; 0x61e <__vector_19+0x5e>
		}
		else {
			hayString = 0; // Termino de transmitir
 60e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <hayString>
			TX_indicelectura = 0;
 612:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <TX_indicelectura>
			TX_indiceescritura = 0;
 616:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <TX_indiceescritura>
			SerialPort_TX_Interrupt_Disable(); // Deshabilitar interrupción de transmisión
 61a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <SerialPort_TX_Interrupt_Disable>
		}
	}
}
 61e:	ff 91       	pop	r31
 620:	ef 91       	pop	r30
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <sprintf>:
 640:	ae e0       	ldi	r26, 0x0E	; 14
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e6 e2       	ldi	r30, 0x26	; 38
 646:	f3 e0       	ldi	r31, 0x03	; 3
 648:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__prologue_saves__+0x1c>
 64c:	0d 89       	ldd	r16, Y+21	; 0x15
 64e:	1e 89       	ldd	r17, Y+22	; 0x16
 650:	86 e0       	ldi	r24, 0x06	; 6
 652:	8c 83       	std	Y+4, r24	; 0x04
 654:	1a 83       	std	Y+2, r17	; 0x02
 656:	09 83       	std	Y+1, r16	; 0x01
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	9f e7       	ldi	r25, 0x7F	; 127
 65c:	9e 83       	std	Y+6, r25	; 0x06
 65e:	8d 83       	std	Y+5, r24	; 0x05
 660:	ae 01       	movw	r20, r28
 662:	47 5e       	subi	r20, 0xE7	; 231
 664:	5f 4f       	sbci	r21, 0xFF	; 255
 666:	6f 89       	ldd	r22, Y+23	; 0x17
 668:	78 8d       	ldd	r23, Y+24	; 0x18
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	0e 94 42 03 	call	0x684	; 0x684 <vfprintf>
 672:	ef 81       	ldd	r30, Y+7	; 0x07
 674:	f8 85       	ldd	r31, Y+8	; 0x08
 676:	e0 0f       	add	r30, r16
 678:	f1 1f       	adc	r31, r17
 67a:	10 82       	st	Z, r1
 67c:	2e 96       	adiw	r28, 0x0e	; 14
 67e:	e4 e0       	ldi	r30, 0x04	; 4
 680:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__epilogue_restores__+0x1c>

00000684 <vfprintf>:
 684:	ab e0       	ldi	r26, 0x0B	; 11
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	e8 e4       	ldi	r30, 0x48	; 72
 68a:	f3 e0       	ldi	r31, 0x03	; 3
 68c:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__prologue_saves__>
 690:	6c 01       	movw	r12, r24
 692:	7b 01       	movw	r14, r22
 694:	8a 01       	movw	r16, r20
 696:	fc 01       	movw	r30, r24
 698:	17 82       	std	Z+7, r1	; 0x07
 69a:	16 82       	std	Z+6, r1	; 0x06
 69c:	83 81       	ldd	r24, Z+3	; 0x03
 69e:	81 ff       	sbrs	r24, 1
 6a0:	cc c1       	rjmp	.+920    	; 0xa3a <__stack+0x13b>
 6a2:	ce 01       	movw	r24, r28
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	3c 01       	movw	r6, r24
 6a8:	f6 01       	movw	r30, r12
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	f7 01       	movw	r30, r14
 6ae:	93 fd       	sbrc	r25, 3
 6b0:	85 91       	lpm	r24, Z+
 6b2:	93 ff       	sbrs	r25, 3
 6b4:	81 91       	ld	r24, Z+
 6b6:	7f 01       	movw	r14, r30
 6b8:	88 23       	and	r24, r24
 6ba:	09 f4       	brne	.+2      	; 0x6be <vfprintf+0x3a>
 6bc:	ba c1       	rjmp	.+884    	; 0xa32 <__stack+0x133>
 6be:	85 32       	cpi	r24, 0x25	; 37
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <vfprintf+0x4c>
 6c2:	93 fd       	sbrc	r25, 3
 6c4:	85 91       	lpm	r24, Z+
 6c6:	93 ff       	sbrs	r25, 3
 6c8:	81 91       	ld	r24, Z+
 6ca:	7f 01       	movw	r14, r30
 6cc:	85 32       	cpi	r24, 0x25	; 37
 6ce:	29 f4       	brne	.+10     	; 0x6da <vfprintf+0x56>
 6d0:	b6 01       	movw	r22, r12
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 6d8:	e7 cf       	rjmp	.-50     	; 0x6a8 <vfprintf+0x24>
 6da:	91 2c       	mov	r9, r1
 6dc:	21 2c       	mov	r2, r1
 6de:	31 2c       	mov	r3, r1
 6e0:	ff e1       	ldi	r31, 0x1F	; 31
 6e2:	f3 15       	cp	r31, r3
 6e4:	d8 f0       	brcs	.+54     	; 0x71c <vfprintf+0x98>
 6e6:	8b 32       	cpi	r24, 0x2B	; 43
 6e8:	79 f0       	breq	.+30     	; 0x708 <vfprintf+0x84>
 6ea:	38 f4       	brcc	.+14     	; 0x6fa <vfprintf+0x76>
 6ec:	80 32       	cpi	r24, 0x20	; 32
 6ee:	79 f0       	breq	.+30     	; 0x70e <vfprintf+0x8a>
 6f0:	83 32       	cpi	r24, 0x23	; 35
 6f2:	a1 f4       	brne	.+40     	; 0x71c <vfprintf+0x98>
 6f4:	23 2d       	mov	r18, r3
 6f6:	20 61       	ori	r18, 0x10	; 16
 6f8:	1d c0       	rjmp	.+58     	; 0x734 <vfprintf+0xb0>
 6fa:	8d 32       	cpi	r24, 0x2D	; 45
 6fc:	61 f0       	breq	.+24     	; 0x716 <vfprintf+0x92>
 6fe:	80 33       	cpi	r24, 0x30	; 48
 700:	69 f4       	brne	.+26     	; 0x71c <vfprintf+0x98>
 702:	23 2d       	mov	r18, r3
 704:	21 60       	ori	r18, 0x01	; 1
 706:	16 c0       	rjmp	.+44     	; 0x734 <vfprintf+0xb0>
 708:	83 2d       	mov	r24, r3
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	38 2e       	mov	r3, r24
 70e:	e3 2d       	mov	r30, r3
 710:	e4 60       	ori	r30, 0x04	; 4
 712:	3e 2e       	mov	r3, r30
 714:	2a c0       	rjmp	.+84     	; 0x76a <vfprintf+0xe6>
 716:	f3 2d       	mov	r31, r3
 718:	f8 60       	ori	r31, 0x08	; 8
 71a:	1d c0       	rjmp	.+58     	; 0x756 <vfprintf+0xd2>
 71c:	37 fc       	sbrc	r3, 7
 71e:	2d c0       	rjmp	.+90     	; 0x77a <vfprintf+0xf6>
 720:	20 ed       	ldi	r18, 0xD0	; 208
 722:	28 0f       	add	r18, r24
 724:	2a 30       	cpi	r18, 0x0A	; 10
 726:	40 f0       	brcs	.+16     	; 0x738 <vfprintf+0xb4>
 728:	8e 32       	cpi	r24, 0x2E	; 46
 72a:	b9 f4       	brne	.+46     	; 0x75a <vfprintf+0xd6>
 72c:	36 fc       	sbrc	r3, 6
 72e:	81 c1       	rjmp	.+770    	; 0xa32 <__stack+0x133>
 730:	23 2d       	mov	r18, r3
 732:	20 64       	ori	r18, 0x40	; 64
 734:	32 2e       	mov	r3, r18
 736:	19 c0       	rjmp	.+50     	; 0x76a <vfprintf+0xe6>
 738:	36 fe       	sbrs	r3, 6
 73a:	06 c0       	rjmp	.+12     	; 0x748 <vfprintf+0xc4>
 73c:	8a e0       	ldi	r24, 0x0A	; 10
 73e:	98 9e       	mul	r9, r24
 740:	20 0d       	add	r18, r0
 742:	11 24       	eor	r1, r1
 744:	92 2e       	mov	r9, r18
 746:	11 c0       	rjmp	.+34     	; 0x76a <vfprintf+0xe6>
 748:	ea e0       	ldi	r30, 0x0A	; 10
 74a:	2e 9e       	mul	r2, r30
 74c:	20 0d       	add	r18, r0
 74e:	11 24       	eor	r1, r1
 750:	22 2e       	mov	r2, r18
 752:	f3 2d       	mov	r31, r3
 754:	f0 62       	ori	r31, 0x20	; 32
 756:	3f 2e       	mov	r3, r31
 758:	08 c0       	rjmp	.+16     	; 0x76a <vfprintf+0xe6>
 75a:	8c 36       	cpi	r24, 0x6C	; 108
 75c:	21 f4       	brne	.+8      	; 0x766 <vfprintf+0xe2>
 75e:	83 2d       	mov	r24, r3
 760:	80 68       	ori	r24, 0x80	; 128
 762:	38 2e       	mov	r3, r24
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0xe6>
 766:	88 36       	cpi	r24, 0x68	; 104
 768:	41 f4       	brne	.+16     	; 0x77a <vfprintf+0xf6>
 76a:	f7 01       	movw	r30, r14
 76c:	93 fd       	sbrc	r25, 3
 76e:	85 91       	lpm	r24, Z+
 770:	93 ff       	sbrs	r25, 3
 772:	81 91       	ld	r24, Z+
 774:	7f 01       	movw	r14, r30
 776:	81 11       	cpse	r24, r1
 778:	b3 cf       	rjmp	.-154    	; 0x6e0 <vfprintf+0x5c>
 77a:	98 2f       	mov	r25, r24
 77c:	9f 7d       	andi	r25, 0xDF	; 223
 77e:	95 54       	subi	r25, 0x45	; 69
 780:	93 30       	cpi	r25, 0x03	; 3
 782:	28 f4       	brcc	.+10     	; 0x78e <vfprintf+0x10a>
 784:	0c 5f       	subi	r16, 0xFC	; 252
 786:	1f 4f       	sbci	r17, 0xFF	; 255
 788:	9f e3       	ldi	r25, 0x3F	; 63
 78a:	99 83       	std	Y+1, r25	; 0x01
 78c:	0d c0       	rjmp	.+26     	; 0x7a8 <vfprintf+0x124>
 78e:	83 36       	cpi	r24, 0x63	; 99
 790:	31 f0       	breq	.+12     	; 0x79e <vfprintf+0x11a>
 792:	83 37       	cpi	r24, 0x73	; 115
 794:	71 f0       	breq	.+28     	; 0x7b2 <vfprintf+0x12e>
 796:	83 35       	cpi	r24, 0x53	; 83
 798:	09 f0       	breq	.+2      	; 0x79c <vfprintf+0x118>
 79a:	59 c0       	rjmp	.+178    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 79c:	21 c0       	rjmp	.+66     	; 0x7e0 <vfprintf+0x15c>
 79e:	f8 01       	movw	r30, r16
 7a0:	80 81       	ld	r24, Z
 7a2:	89 83       	std	Y+1, r24	; 0x01
 7a4:	0e 5f       	subi	r16, 0xFE	; 254
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	88 24       	eor	r8, r8
 7aa:	83 94       	inc	r8
 7ac:	91 2c       	mov	r9, r1
 7ae:	53 01       	movw	r10, r6
 7b0:	13 c0       	rjmp	.+38     	; 0x7d8 <vfprintf+0x154>
 7b2:	28 01       	movw	r4, r16
 7b4:	f2 e0       	ldi	r31, 0x02	; 2
 7b6:	4f 0e       	add	r4, r31
 7b8:	51 1c       	adc	r5, r1
 7ba:	f8 01       	movw	r30, r16
 7bc:	a0 80       	ld	r10, Z
 7be:	b1 80       	ldd	r11, Z+1	; 0x01
 7c0:	36 fe       	sbrs	r3, 6
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <vfprintf+0x146>
 7c4:	69 2d       	mov	r22, r9
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x14a>
 7ca:	6f ef       	ldi	r22, 0xFF	; 255
 7cc:	7f ef       	ldi	r23, 0xFF	; 255
 7ce:	c5 01       	movw	r24, r10
 7d0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strnlen>
 7d4:	4c 01       	movw	r8, r24
 7d6:	82 01       	movw	r16, r4
 7d8:	f3 2d       	mov	r31, r3
 7da:	ff 77       	andi	r31, 0x7F	; 127
 7dc:	3f 2e       	mov	r3, r31
 7de:	16 c0       	rjmp	.+44     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7e0:	28 01       	movw	r4, r16
 7e2:	22 e0       	ldi	r18, 0x02	; 2
 7e4:	42 0e       	add	r4, r18
 7e6:	51 1c       	adc	r5, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	a0 80       	ld	r10, Z
 7ec:	b1 80       	ldd	r11, Z+1	; 0x01
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x174>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x178>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c5 01       	movw	r24, r10
 7fe:	0e 94 23 05 	call	0xa46	; 0xa46 <strnlen_P>
 802:	4c 01       	movw	r8, r24
 804:	f3 2d       	mov	r31, r3
 806:	f0 68       	ori	r31, 0x80	; 128
 808:	3f 2e       	mov	r3, r31
 80a:	82 01       	movw	r16, r4
 80c:	33 fc       	sbrc	r3, 3
 80e:	1b c0       	rjmp	.+54     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 810:	82 2d       	mov	r24, r2
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	88 16       	cp	r8, r24
 816:	99 06       	cpc	r9, r25
 818:	b0 f4       	brcc	.+44     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 81a:	b6 01       	movw	r22, r12
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 824:	2a 94       	dec	r2
 826:	f4 cf       	rjmp	.-24     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 828:	f5 01       	movw	r30, r10
 82a:	37 fc       	sbrc	r3, 7
 82c:	85 91       	lpm	r24, Z+
 82e:	37 fe       	sbrs	r3, 7
 830:	81 91       	ld	r24, Z+
 832:	5f 01       	movw	r10, r30
 834:	b6 01       	movw	r22, r12
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 83c:	21 10       	cpse	r2, r1
 83e:	2a 94       	dec	r2
 840:	21 e0       	ldi	r18, 0x01	; 1
 842:	82 1a       	sub	r8, r18
 844:	91 08       	sbc	r9, r1
 846:	81 14       	cp	r8, r1
 848:	91 04       	cpc	r9, r1
 84a:	71 f7       	brne	.-36     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 84c:	e8 c0       	rjmp	.+464    	; 0xa1e <__stack+0x11f>
 84e:	84 36       	cpi	r24, 0x64	; 100
 850:	11 f0       	breq	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 852:	89 36       	cpi	r24, 0x69	; 105
 854:	41 f5       	brne	.+80     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 856:	f8 01       	movw	r30, r16
 858:	37 fe       	sbrs	r3, 7
 85a:	07 c0       	rjmp	.+14     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 85c:	60 81       	ld	r22, Z
 85e:	71 81       	ldd	r23, Z+1	; 0x01
 860:	82 81       	ldd	r24, Z+2	; 0x02
 862:	93 81       	ldd	r25, Z+3	; 0x03
 864:	0c 5f       	subi	r16, 0xFC	; 252
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	08 c0       	rjmp	.+16     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 86a:	60 81       	ld	r22, Z
 86c:	71 81       	ldd	r23, Z+1	; 0x01
 86e:	07 2e       	mov	r0, r23
 870:	00 0c       	add	r0, r0
 872:	88 0b       	sbc	r24, r24
 874:	99 0b       	sbc	r25, r25
 876:	0e 5f       	subi	r16, 0xFE	; 254
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	f3 2d       	mov	r31, r3
 87c:	ff 76       	andi	r31, 0x6F	; 111
 87e:	3f 2e       	mov	r3, r31
 880:	97 ff       	sbrs	r25, 7
 882:	09 c0       	rjmp	.+18     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 884:	90 95       	com	r25
 886:	80 95       	com	r24
 888:	70 95       	com	r23
 88a:	61 95       	neg	r22
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	f0 68       	ori	r31, 0x80	; 128
 894:	3f 2e       	mov	r3, r31
 896:	2a e0       	ldi	r18, 0x0A	; 10
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	a3 01       	movw	r20, r6
 89c:	0e 94 75 05 	call	0xaea	; 0xaea <__ultoa_invert>
 8a0:	88 2e       	mov	r8, r24
 8a2:	86 18       	sub	r8, r6
 8a4:	45 c0       	rjmp	.+138    	; 0x930 <__stack+0x31>
 8a6:	85 37       	cpi	r24, 0x75	; 117
 8a8:	31 f4       	brne	.+12     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8aa:	23 2d       	mov	r18, r3
 8ac:	2f 7e       	andi	r18, 0xEF	; 239
 8ae:	b2 2e       	mov	r11, r18
 8b0:	2a e0       	ldi	r18, 0x0A	; 10
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	25 c0       	rjmp	.+74     	; 0x900 <__stack+0x1>
 8b6:	93 2d       	mov	r25, r3
 8b8:	99 7f       	andi	r25, 0xF9	; 249
 8ba:	b9 2e       	mov	r11, r25
 8bc:	8f 36       	cpi	r24, 0x6F	; 111
 8be:	c1 f0       	breq	.+48     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8c0:	18 f4       	brcc	.+6      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c2:	88 35       	cpi	r24, 0x58	; 88
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8c6:	b5 c0       	rjmp	.+362    	; 0xa32 <__stack+0x133>
 8c8:	80 37       	cpi	r24, 0x70	; 112
 8ca:	19 f0       	breq	.+6      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8cc:	88 37       	cpi	r24, 0x78	; 120
 8ce:	21 f0       	breq	.+8      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8d0:	b0 c0       	rjmp	.+352    	; 0xa32 <__stack+0x133>
 8d2:	e9 2f       	mov	r30, r25
 8d4:	e0 61       	ori	r30, 0x10	; 16
 8d6:	be 2e       	mov	r11, r30
 8d8:	b4 fe       	sbrs	r11, 4
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8dc:	fb 2d       	mov	r31, r11
 8de:	f4 60       	ori	r31, 0x04	; 4
 8e0:	bf 2e       	mov	r11, r31
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8e4:	34 fe       	sbrs	r3, 4
 8e6:	0a c0       	rjmp	.+20     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8e8:	29 2f       	mov	r18, r25
 8ea:	26 60       	ori	r18, 0x06	; 6
 8ec:	b2 2e       	mov	r11, r18
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f0:	28 e0       	ldi	r18, 0x08	; 8
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	05 c0       	rjmp	.+10     	; 0x900 <__stack+0x1>
 8f6:	20 e1       	ldi	r18, 0x10	; 16
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
 8fc:	20 e1       	ldi	r18, 0x10	; 16
 8fe:	32 e0       	ldi	r19, 0x02	; 2
 900:	f8 01       	movw	r30, r16
 902:	b7 fe       	sbrs	r11, 7
 904:	07 c0       	rjmp	.+14     	; 0x914 <__stack+0x15>
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	82 81       	ldd	r24, Z+2	; 0x02
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	0c 5f       	subi	r16, 0xFC	; 252
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0x21>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 5f       	subi	r16, 0xFE	; 254
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	a3 01       	movw	r20, r6
 922:	0e 94 75 05 	call	0xaea	; 0xaea <__ultoa_invert>
 926:	88 2e       	mov	r8, r24
 928:	86 18       	sub	r8, r6
 92a:	fb 2d       	mov	r31, r11
 92c:	ff 77       	andi	r31, 0x7F	; 127
 92e:	3f 2e       	mov	r3, r31
 930:	36 fe       	sbrs	r3, 6
 932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0x4f>
 934:	23 2d       	mov	r18, r3
 936:	2e 7f       	andi	r18, 0xFE	; 254
 938:	a2 2e       	mov	r10, r18
 93a:	89 14       	cp	r8, r9
 93c:	58 f4       	brcc	.+22     	; 0x954 <__stack+0x55>
 93e:	34 fe       	sbrs	r3, 4
 940:	0b c0       	rjmp	.+22     	; 0x958 <__stack+0x59>
 942:	32 fc       	sbrc	r3, 2
 944:	09 c0       	rjmp	.+18     	; 0x958 <__stack+0x59>
 946:	83 2d       	mov	r24, r3
 948:	8e 7e       	andi	r24, 0xEE	; 238
 94a:	a8 2e       	mov	r10, r24
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0x59>
 94e:	b8 2c       	mov	r11, r8
 950:	a3 2c       	mov	r10, r3
 952:	03 c0       	rjmp	.+6      	; 0x95a <__stack+0x5b>
 954:	b8 2c       	mov	r11, r8
 956:	01 c0       	rjmp	.+2      	; 0x95a <__stack+0x5b>
 958:	b9 2c       	mov	r11, r9
 95a:	a4 fe       	sbrs	r10, 4
 95c:	0f c0       	rjmp	.+30     	; 0x97c <__stack+0x7d>
 95e:	fe 01       	movw	r30, r28
 960:	e8 0d       	add	r30, r8
 962:	f1 1d       	adc	r31, r1
 964:	80 81       	ld	r24, Z
 966:	80 33       	cpi	r24, 0x30	; 48
 968:	21 f4       	brne	.+8      	; 0x972 <__stack+0x73>
 96a:	9a 2d       	mov	r25, r10
 96c:	99 7e       	andi	r25, 0xE9	; 233
 96e:	a9 2e       	mov	r10, r25
 970:	09 c0       	rjmp	.+18     	; 0x984 <__stack+0x85>
 972:	a2 fe       	sbrs	r10, 2
 974:	06 c0       	rjmp	.+12     	; 0x982 <__stack+0x83>
 976:	b3 94       	inc	r11
 978:	b3 94       	inc	r11
 97a:	04 c0       	rjmp	.+8      	; 0x984 <__stack+0x85>
 97c:	8a 2d       	mov	r24, r10
 97e:	86 78       	andi	r24, 0x86	; 134
 980:	09 f0       	breq	.+2      	; 0x984 <__stack+0x85>
 982:	b3 94       	inc	r11
 984:	a3 fc       	sbrc	r10, 3
 986:	11 c0       	rjmp	.+34     	; 0x9aa <__stack+0xab>
 988:	a0 fe       	sbrs	r10, 0
 98a:	06 c0       	rjmp	.+12     	; 0x998 <__stack+0x99>
 98c:	b2 14       	cp	r11, r2
 98e:	88 f4       	brcc	.+34     	; 0x9b2 <__stack+0xb3>
 990:	28 0c       	add	r2, r8
 992:	92 2c       	mov	r9, r2
 994:	9b 18       	sub	r9, r11
 996:	0e c0       	rjmp	.+28     	; 0x9b4 <__stack+0xb5>
 998:	b2 14       	cp	r11, r2
 99a:	60 f4       	brcc	.+24     	; 0x9b4 <__stack+0xb5>
 99c:	b6 01       	movw	r22, r12
 99e:	80 e2       	ldi	r24, 0x20	; 32
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9a6:	b3 94       	inc	r11
 9a8:	f7 cf       	rjmp	.-18     	; 0x998 <__stack+0x99>
 9aa:	b2 14       	cp	r11, r2
 9ac:	18 f4       	brcc	.+6      	; 0x9b4 <__stack+0xb5>
 9ae:	2b 18       	sub	r2, r11
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
 9b2:	98 2c       	mov	r9, r8
 9b4:	21 2c       	mov	r2, r1
 9b6:	a4 fe       	sbrs	r10, 4
 9b8:	10 c0       	rjmp	.+32     	; 0x9da <__stack+0xdb>
 9ba:	b6 01       	movw	r22, r12
 9bc:	80 e3       	ldi	r24, 0x30	; 48
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9c4:	a2 fe       	sbrs	r10, 2
 9c6:	17 c0       	rjmp	.+46     	; 0x9f6 <__stack+0xf7>
 9c8:	a1 fc       	sbrc	r10, 1
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <__stack+0xd3>
 9cc:	88 e7       	ldi	r24, 0x78	; 120
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
 9d2:	88 e5       	ldi	r24, 0x58	; 88
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	b6 01       	movw	r22, r12
 9d8:	0c c0       	rjmp	.+24     	; 0x9f2 <__stack+0xf3>
 9da:	8a 2d       	mov	r24, r10
 9dc:	86 78       	andi	r24, 0x86	; 134
 9de:	59 f0       	breq	.+22     	; 0x9f6 <__stack+0xf7>
 9e0:	a1 fe       	sbrs	r10, 1
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0xe9>
 9e4:	8b e2       	ldi	r24, 0x2B	; 43
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	80 e2       	ldi	r24, 0x20	; 32
 9ea:	a7 fc       	sbrc	r10, 7
 9ec:	8d e2       	ldi	r24, 0x2D	; 45
 9ee:	b6 01       	movw	r22, r12
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9f6:	89 14       	cp	r8, r9
 9f8:	38 f4       	brcc	.+14     	; 0xa08 <__stack+0x109>
 9fa:	b6 01       	movw	r22, r12
 9fc:	80 e3       	ldi	r24, 0x30	; 48
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 a04:	9a 94       	dec	r9
 a06:	f7 cf       	rjmp	.-18     	; 0x9f6 <__stack+0xf7>
 a08:	8a 94       	dec	r8
 a0a:	f3 01       	movw	r30, r6
 a0c:	e8 0d       	add	r30, r8
 a0e:	f1 1d       	adc	r31, r1
 a10:	80 81       	ld	r24, Z
 a12:	b6 01       	movw	r22, r12
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 a1a:	81 10       	cpse	r8, r1
 a1c:	f5 cf       	rjmp	.-22     	; 0xa08 <__stack+0x109>
 a1e:	22 20       	and	r2, r2
 a20:	09 f4       	brne	.+2      	; 0xa24 <__stack+0x125>
 a22:	42 ce       	rjmp	.-892    	; 0x6a8 <vfprintf+0x24>
 a24:	b6 01       	movw	r22, r12
 a26:	80 e2       	ldi	r24, 0x20	; 32
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 a2e:	2a 94       	dec	r2
 a30:	f6 cf       	rjmp	.-20     	; 0xa1e <__stack+0x11f>
 a32:	f6 01       	movw	r30, r12
 a34:	86 81       	ldd	r24, Z+6	; 0x06
 a36:	97 81       	ldd	r25, Z+7	; 0x07
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x13f>
 a3a:	8f ef       	ldi	r24, 0xFF	; 255
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	2b 96       	adiw	r28, 0x0b	; 11
 a40:	e2 e1       	ldi	r30, 0x12	; 18
 a42:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__epilogue_restores__>

00000a46 <strnlen_P>:
 a46:	fc 01       	movw	r30, r24
 a48:	05 90       	lpm	r0, Z+
 a4a:	61 50       	subi	r22, 0x01	; 1
 a4c:	70 40       	sbci	r23, 0x00	; 0
 a4e:	01 10       	cpse	r0, r1
 a50:	d8 f7       	brcc	.-10     	; 0xa48 <strnlen_P+0x2>
 a52:	80 95       	com	r24
 a54:	90 95       	com	r25
 a56:	8e 0f       	add	r24, r30
 a58:	9f 1f       	adc	r25, r31
 a5a:	08 95       	ret

00000a5c <strnlen>:
 a5c:	fc 01       	movw	r30, r24
 a5e:	61 50       	subi	r22, 0x01	; 1
 a60:	70 40       	sbci	r23, 0x00	; 0
 a62:	01 90       	ld	r0, Z+
 a64:	01 10       	cpse	r0, r1
 a66:	d8 f7       	brcc	.-10     	; 0xa5e <strnlen+0x2>
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	8e 0f       	add	r24, r30
 a6e:	9f 1f       	adc	r25, r31
 a70:	08 95       	ret

00000a72 <fputc>:
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	fb 01       	movw	r30, r22
 a7c:	23 81       	ldd	r18, Z+3	; 0x03
 a7e:	21 fd       	sbrc	r18, 1
 a80:	03 c0       	rjmp	.+6      	; 0xa88 <fputc+0x16>
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	2c c0       	rjmp	.+88     	; 0xae0 <fputc+0x6e>
 a88:	22 ff       	sbrs	r18, 2
 a8a:	16 c0       	rjmp	.+44     	; 0xab8 <fputc+0x46>
 a8c:	46 81       	ldd	r20, Z+6	; 0x06
 a8e:	57 81       	ldd	r21, Z+7	; 0x07
 a90:	24 81       	ldd	r18, Z+4	; 0x04
 a92:	35 81       	ldd	r19, Z+5	; 0x05
 a94:	42 17       	cp	r20, r18
 a96:	53 07       	cpc	r21, r19
 a98:	44 f4       	brge	.+16     	; 0xaaa <fputc+0x38>
 a9a:	a0 81       	ld	r26, Z
 a9c:	b1 81       	ldd	r27, Z+1	; 0x01
 a9e:	9d 01       	movw	r18, r26
 aa0:	2f 5f       	subi	r18, 0xFF	; 255
 aa2:	3f 4f       	sbci	r19, 0xFF	; 255
 aa4:	31 83       	std	Z+1, r19	; 0x01
 aa6:	20 83       	st	Z, r18
 aa8:	8c 93       	st	X, r24
 aaa:	26 81       	ldd	r18, Z+6	; 0x06
 aac:	37 81       	ldd	r19, Z+7	; 0x07
 aae:	2f 5f       	subi	r18, 0xFF	; 255
 ab0:	3f 4f       	sbci	r19, 0xFF	; 255
 ab2:	37 83       	std	Z+7, r19	; 0x07
 ab4:	26 83       	std	Z+6, r18	; 0x06
 ab6:	14 c0       	rjmp	.+40     	; 0xae0 <fputc+0x6e>
 ab8:	8b 01       	movw	r16, r22
 aba:	ec 01       	movw	r28, r24
 abc:	fb 01       	movw	r30, r22
 abe:	00 84       	ldd	r0, Z+8	; 0x08
 ac0:	f1 85       	ldd	r31, Z+9	; 0x09
 ac2:	e0 2d       	mov	r30, r0
 ac4:	09 95       	icall
 ac6:	89 2b       	or	r24, r25
 ac8:	e1 f6       	brne	.-72     	; 0xa82 <fputc+0x10>
 aca:	d8 01       	movw	r26, r16
 acc:	16 96       	adiw	r26, 0x06	; 6
 ace:	8d 91       	ld	r24, X+
 ad0:	9c 91       	ld	r25, X
 ad2:	17 97       	sbiw	r26, 0x07	; 7
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	17 96       	adiw	r26, 0x07	; 7
 ad8:	9c 93       	st	X, r25
 ada:	8e 93       	st	-X, r24
 adc:	16 97       	sbiw	r26, 0x06	; 6
 ade:	ce 01       	movw	r24, r28
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	1f 91       	pop	r17
 ae6:	0f 91       	pop	r16
 ae8:	08 95       	ret

00000aea <__ultoa_invert>:
 aea:	fa 01       	movw	r30, r20
 aec:	aa 27       	eor	r26, r26
 aee:	28 30       	cpi	r18, 0x08	; 8
 af0:	51 f1       	breq	.+84     	; 0xb46 <__ultoa_invert+0x5c>
 af2:	20 31       	cpi	r18, 0x10	; 16
 af4:	81 f1       	breq	.+96     	; 0xb56 <__ultoa_invert+0x6c>
 af6:	e8 94       	clt
 af8:	6f 93       	push	r22
 afa:	6e 7f       	andi	r22, 0xFE	; 254
 afc:	6e 5f       	subi	r22, 0xFE	; 254
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	af 4f       	sbci	r26, 0xFF	; 255
 b06:	b1 e0       	ldi	r27, 0x01	; 1
 b08:	3e d0       	rcall	.+124    	; 0xb86 <__ultoa_invert+0x9c>
 b0a:	b4 e0       	ldi	r27, 0x04	; 4
 b0c:	3c d0       	rcall	.+120    	; 0xb86 <__ultoa_invert+0x9c>
 b0e:	67 0f       	add	r22, r23
 b10:	78 1f       	adc	r23, r24
 b12:	89 1f       	adc	r24, r25
 b14:	9a 1f       	adc	r25, r26
 b16:	a1 1d       	adc	r26, r1
 b18:	68 0f       	add	r22, r24
 b1a:	79 1f       	adc	r23, r25
 b1c:	8a 1f       	adc	r24, r26
 b1e:	91 1d       	adc	r25, r1
 b20:	a1 1d       	adc	r26, r1
 b22:	6a 0f       	add	r22, r26
 b24:	71 1d       	adc	r23, r1
 b26:	81 1d       	adc	r24, r1
 b28:	91 1d       	adc	r25, r1
 b2a:	a1 1d       	adc	r26, r1
 b2c:	20 d0       	rcall	.+64     	; 0xb6e <__ultoa_invert+0x84>
 b2e:	09 f4       	brne	.+2      	; 0xb32 <__ultoa_invert+0x48>
 b30:	68 94       	set
 b32:	3f 91       	pop	r19
 b34:	2a e0       	ldi	r18, 0x0A	; 10
 b36:	26 9f       	mul	r18, r22
 b38:	11 24       	eor	r1, r1
 b3a:	30 19       	sub	r19, r0
 b3c:	30 5d       	subi	r19, 0xD0	; 208
 b3e:	31 93       	st	Z+, r19
 b40:	de f6       	brtc	.-74     	; 0xaf8 <__ultoa_invert+0xe>
 b42:	cf 01       	movw	r24, r30
 b44:	08 95       	ret
 b46:	46 2f       	mov	r20, r22
 b48:	47 70       	andi	r20, 0x07	; 7
 b4a:	40 5d       	subi	r20, 0xD0	; 208
 b4c:	41 93       	st	Z+, r20
 b4e:	b3 e0       	ldi	r27, 0x03	; 3
 b50:	0f d0       	rcall	.+30     	; 0xb70 <__ultoa_invert+0x86>
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0x5c>
 b54:	f6 cf       	rjmp	.-20     	; 0xb42 <__ultoa_invert+0x58>
 b56:	46 2f       	mov	r20, r22
 b58:	4f 70       	andi	r20, 0x0F	; 15
 b5a:	40 5d       	subi	r20, 0xD0	; 208
 b5c:	4a 33       	cpi	r20, 0x3A	; 58
 b5e:	18 f0       	brcs	.+6      	; 0xb66 <__ultoa_invert+0x7c>
 b60:	49 5d       	subi	r20, 0xD9	; 217
 b62:	31 fd       	sbrc	r19, 1
 b64:	40 52       	subi	r20, 0x20	; 32
 b66:	41 93       	st	Z+, r20
 b68:	02 d0       	rcall	.+4      	; 0xb6e <__ultoa_invert+0x84>
 b6a:	a9 f7       	brne	.-22     	; 0xb56 <__ultoa_invert+0x6c>
 b6c:	ea cf       	rjmp	.-44     	; 0xb42 <__ultoa_invert+0x58>
 b6e:	b4 e0       	ldi	r27, 0x04	; 4
 b70:	a6 95       	lsr	r26
 b72:	97 95       	ror	r25
 b74:	87 95       	ror	r24
 b76:	77 95       	ror	r23
 b78:	67 95       	ror	r22
 b7a:	ba 95       	dec	r27
 b7c:	c9 f7       	brne	.-14     	; 0xb70 <__ultoa_invert+0x86>
 b7e:	00 97       	sbiw	r24, 0x00	; 0
 b80:	61 05       	cpc	r22, r1
 b82:	71 05       	cpc	r23, r1
 b84:	08 95       	ret
 b86:	9b 01       	movw	r18, r22
 b88:	ac 01       	movw	r20, r24
 b8a:	0a 2e       	mov	r0, r26
 b8c:	06 94       	lsr	r0
 b8e:	57 95       	ror	r21
 b90:	47 95       	ror	r20
 b92:	37 95       	ror	r19
 b94:	27 95       	ror	r18
 b96:	ba 95       	dec	r27
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__ultoa_invert+0xa2>
 b9a:	62 0f       	add	r22, r18
 b9c:	73 1f       	adc	r23, r19
 b9e:	84 1f       	adc	r24, r20
 ba0:	95 1f       	adc	r25, r21
 ba2:	a0 1d       	adc	r26, r0
 ba4:	08 95       	ret

00000ba6 <__prologue_saves__>:
 ba6:	2f 92       	push	r2
 ba8:	3f 92       	push	r3
 baa:	4f 92       	push	r4
 bac:	5f 92       	push	r5
 bae:	6f 92       	push	r6
 bb0:	7f 92       	push	r7
 bb2:	8f 92       	push	r8
 bb4:	9f 92       	push	r9
 bb6:	af 92       	push	r10
 bb8:	bf 92       	push	r11
 bba:	cf 92       	push	r12
 bbc:	df 92       	push	r13
 bbe:	ef 92       	push	r14
 bc0:	ff 92       	push	r15
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
 bca:	cd b7       	in	r28, 0x3d	; 61
 bcc:	de b7       	in	r29, 0x3e	; 62
 bce:	ca 1b       	sub	r28, r26
 bd0:	db 0b       	sbc	r29, r27
 bd2:	0f b6       	in	r0, 0x3f	; 63
 bd4:	f8 94       	cli
 bd6:	de bf       	out	0x3e, r29	; 62
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	cd bf       	out	0x3d, r28	; 61
 bdc:	09 94       	ijmp

00000bde <__epilogue_restores__>:
 bde:	2a 88       	ldd	r2, Y+18	; 0x12
 be0:	39 88       	ldd	r3, Y+17	; 0x11
 be2:	48 88       	ldd	r4, Y+16	; 0x10
 be4:	5f 84       	ldd	r5, Y+15	; 0x0f
 be6:	6e 84       	ldd	r6, Y+14	; 0x0e
 be8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bea:	8c 84       	ldd	r8, Y+12	; 0x0c
 bec:	9b 84       	ldd	r9, Y+11	; 0x0b
 bee:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf0:	b9 84       	ldd	r11, Y+9	; 0x09
 bf2:	c8 84       	ldd	r12, Y+8	; 0x08
 bf4:	df 80       	ldd	r13, Y+7	; 0x07
 bf6:	ee 80       	ldd	r14, Y+6	; 0x06
 bf8:	fd 80       	ldd	r15, Y+5	; 0x05
 bfa:	0c 81       	ldd	r16, Y+4	; 0x04
 bfc:	1b 81       	ldd	r17, Y+3	; 0x03
 bfe:	aa 81       	ldd	r26, Y+2	; 0x02
 c00:	b9 81       	ldd	r27, Y+1	; 0x01
 c02:	ce 0f       	add	r28, r30
 c04:	d1 1d       	adc	r29, r1
 c06:	0f b6       	in	r0, 0x3f	; 63
 c08:	f8 94       	cli
 c0a:	de bf       	out	0x3e, r29	; 62
 c0c:	0f be       	out	0x3f, r0	; 63
 c0e:	cd bf       	out	0x3d, r28	; 61
 c10:	ed 01       	movw	r28, r26
 c12:	08 95       	ret

00000c14 <_exit>:
 c14:	f8 94       	cli

00000c16 <__stop_program>:
 c16:	ff cf       	rjmp	.-2      	; 0xc16 <__stop_program>
