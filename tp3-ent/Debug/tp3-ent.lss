
tp3-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00000c90  00000d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  008001b2  008001b2  00000dd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001918  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d55  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1f  00000000  00000000  000036a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  000047f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bcc  00000000  00000000  00004fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_18>
  4c:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3b       	cpi	r26, 0xB2	; 178
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 eb       	ldi	r26, 0xB2	; 178
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b4 01 	call	0x368	; 0x368 <main>
  9e:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_startSignal_y_respuesta>:

#include "DHT11.h"


void DHT11_startSignal_y_respuesta(){
	DDRC |= (1<<PORTC0);  //Configurar como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<PORTC0);  //Poner en valor bajo
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 ee       	ldi	r24, 0xE0	; 224
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_startSignal_y_respuesta+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_startSignal_y_respuesta+0x1c>
  c2:	00 00       	nop
	_delay_ms(18); // delay de al menos 18ms
	
	
	DDRC &=~(1<<PORTC0);  // Configurar como entrada
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC |=(1<<PORTC0);  // Poner en alto la señal
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	88 b9       	out	0x08, r24	; 8
	
	while(PINC & (1<<PINC0));// Esperar que el sensor ponga en bajo la señal
  d0:	30 99       	sbic	0x06, 0	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <DHT11_startSignal_y_respuesta+0x2a>
	while((PINC & (1<<PINC0))==0);//Esperar que el sensor ponga en alto la señal
  d4:	30 9b       	sbis	0x06, 0	; 6
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <DHT11_startSignal_y_respuesta+0x2e>
}
  d8:	08 95       	ret

000000da <DHT11_bits>:


int DHT11_bits(){
	int cant;
	int i;
	int valor=0;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0; i<8; i++){
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	1a c0       	rjmp	.+52     	; 0x118 <DHT11_bits+0x3e>
		cant=0;  //cantidad de us transcurridos
		while(PINC & (1<<PINC0));  //Esperar que el sensor ponga en bajo la señal
  e4:	30 99       	sbic	0x06, 0	; 6
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <DHT11_bits+0xa>
		while((PINC & (1<<PINC0))==0); //Eperar que el sensor suba la señal 
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <DHT11_bits+0xe>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	06 c0       	rjmp	.+12     	; 0xfe <DHT11_bits+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	6a 95       	dec	r22
  f6:	f1 f7       	brne	.-4      	; 0xf4 <DHT11_bits+0x1a>
  f8:	00 00       	nop
		while(PINC & (1<<PINC0)){  //Mietras la señal este en alto
			_delay_us(1); 
			cant++; 
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
	int valor=0;
	for(i=0; i<8; i++){
		cant=0;  //cantidad de us transcurridos
		while(PINC & (1<<PINC0));  //Esperar que el sensor ponga en bajo la señal
		while((PINC & (1<<PINC0))==0); //Eperar que el sensor suba la señal 
		while(PINC & (1<<PINC0)){  //Mietras la señal este en alto
  fe:	30 99       	sbic	0x06, 0	; 6
 100:	f8 cf       	rjmp	.-16     	; 0xf2 <DHT11_bits+0x18>
			_delay_us(1); 
			cant++; 
		}
		if(cant < 29) //Si pasaron menos de 29us es un "0"
 102:	2d 31       	cpi	r18, 0x1D	; 29
 104:	31 05       	cpc	r19, r1
 106:	1c f4       	brge	.+6      	; 0x10e <DHT11_bits+0x34>
			valor = (valor<<1);
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	03 c0       	rjmp	.+6      	; 0x114 <DHT11_bits+0x3a>
		else //sino es un "1"
			valor = (valor<<1)|(0x01);
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	81 60       	ori	r24, 0x01	; 1

int DHT11_bits(){
	int cant;
	int i;
	int valor=0;
	for(i=0; i<8; i++){
 114:	4f 5f       	subi	r20, 0xFF	; 255
 116:	5f 4f       	sbci	r21, 0xFF	; 255
 118:	48 30       	cpi	r20, 0x08	; 8
 11a:	51 05       	cpc	r21, r1
 11c:	1c f3       	brlt	.-58     	; 0xe4 <DHT11_bits+0xa>
			valor = (valor<<1);
		else //sino es un "1"
			valor = (valor<<1)|(0x01);
	}
	return valor;
}
 11e:	08 95       	ret

00000120 <DHT11_obtenerDatos>:

void DHT11_obtenerDatos(int *temperatura,int *temperatura_decimal, int *humedad, int *humedad_decimal){
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
 132:	eb 01       	movw	r28, r22
 134:	6a 01       	movw	r12, r20
 136:	79 01       	movw	r14, r18
	int sum=0;

	DHT11_startSignal_y_respuesta();
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_startSignal_y_respuesta>
	
	//Empieza la transmision de datos
	
	*humedad=DHT11_bits();
 13c:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 140:	f6 01       	movw	r30, r12
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
	*humedad_decimal=DHT11_bits();
 146:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 14a:	f7 01       	movw	r30, r14
 14c:	91 83       	std	Z+1, r25	; 0x01
 14e:	80 83       	st	Z, r24
	*temperatura=DHT11_bits();
 150:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 154:	f8 01       	movw	r30, r16
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
	*temperatura_decimal=DHT11_bits();
 15a:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 15e:	99 83       	std	Y+1, r25	; 0x01
 160:	88 83       	st	Y, r24
	sum=DHT11_bits();
 162:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	08 95       	ret

00000178 <I2C_Init>:

#define DS3231_ADDRESS 0x68

// I2C functions implementation
void I2C_Init(void) {
	TWSR = 0x00; // Set prescaler to 1
 178:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x47; // Set SCL frequency to 100 kHz (assuming 16 MHz clock)
 17c:	87 e4       	ldi	r24, 0x47	; 71
 17e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN); // Enable TWI
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 188:	08 95       	ret

0000018a <I2C_Start>:
}

void I2C_Start(void) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); // Send start condition
 18a:	84 ea       	ldi	r24, 0xA4	; 164
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Wait for TWINT flag set
 190:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 194:	88 23       	and	r24, r24
 196:	e4 f7       	brge	.-8      	; 0x190 <I2C_Start+0x6>
}
 198:	08 95       	ret

0000019a <I2C_Stop>:

void I2C_Stop(void) {
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT); // Send stop condition
 19a:	84 e9       	ldi	r24, 0x94	; 148
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Wait for stop condition to be executed
 1a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a4:	84 fd       	sbrc	r24, 4
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <I2C_Stop+0x6>
}
 1a8:	08 95       	ret

000001aa <I2C_Write>:

void I2C_Write(uint8_t data) {
	TWDR = data; // Load data into TWDR register
 1aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT); // Start data transmission
 1ae:	84 e8       	ldi	r24, 0x84	; 132
 1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Wait for TWINT flag set
 1b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b8:	88 23       	and	r24, r24
 1ba:	e4 f7       	brge	.-8      	; 0x1b4 <I2C_Write+0xa>
}
 1bc:	08 95       	ret

000001be <I2C_Read_Ack>:

uint8_t I2C_Read_Ack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA); // Enable TWI and ACK
 1be:	84 ec       	ldi	r24, 0xC4	; 196
 1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Wait for TWINT flag set
 1c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c8:	88 23       	and	r24, r24
 1ca:	e4 f7       	brge	.-8      	; 0x1c4 <I2C_Read_Ack+0x6>
	return TWDR; // Return received data
 1cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 1d0:	08 95       	ret

000001d2 <I2C_Read_NAck>:

uint8_t I2C_Read_NAck(void) {
	TWCR = (1 << TWEN) | (1 << TWINT); // Enable TWI without ACK
 1d2:	84 e8       	ldi	r24, 0x84	; 132
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Wait for TWINT flag set
 1d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1dc:	88 23       	and	r24, r24
 1de:	e4 f7       	brge	.-8      	; 0x1d8 <I2C_Read_NAck+0x6>
	return TWDR; // Return received data
 1e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 1e4:	08 95       	ret

000001e6 <DS3231_Init>:

// DS3231 functions implementation
void DS3231_Init(void) {
	I2C_Init();
 1e6:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Init>
 1ea:	08 95       	ret

000001ec <DS3231_GetTime>:
}

void DS3231_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
 1fa:	8b 01       	movw	r16, r22
 1fc:	7a 01       	movw	r14, r20
	I2C_Start();
 1fe:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Send DS3231 address with write flag
 202:	80 ed       	ldi	r24, 0xD0	; 208
 204:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(0x00); // Start from register 0x00 (seconds register)
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Start(); // Repeat start
 20e:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 1); // Send DS3231 address with read flag
 212:	81 ed       	ldi	r24, 0xD1	; 209
 214:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>

	*seconds = I2C_Read_Ack();
 218:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Read_Ack>
 21c:	f7 01       	movw	r30, r14
 21e:	80 83       	st	Z, r24
	*minutes = I2C_Read_Ack();
 220:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Read_Ack>
 224:	f8 01       	movw	r30, r16
 226:	80 83       	st	Z, r24
	*hours = I2C_Read_NAck();
 228:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Read_NAck>
 22c:	88 83       	st	Y, r24

	I2C_Stop();
 22e:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Stop>
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	08 95       	ret

00000240 <DS3231_GetDate>:

void DS3231_GetDate(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year) {
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	6c 01       	movw	r12, r24
 252:	7b 01       	movw	r14, r22
 254:	8a 01       	movw	r16, r20
 256:	e9 01       	movw	r28, r18
	I2C_Start();
 258:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Send DS3231 address with write flag
 25c:	80 ed       	ldi	r24, 0xD0	; 208
 25e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(0x03); // Start from register 0x03 (day register)
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Start(); // Repeat start
 268:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 1); // Send DS3231 address with read flag
 26c:	81 ed       	ldi	r24, 0xD1	; 209
 26e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>

	*day = I2C_Read_Ack();
 272:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Read_Ack>
 276:	f6 01       	movw	r30, r12
 278:	80 83       	st	Z, r24
	*date = I2C_Read_Ack();
 27a:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Read_Ack>
 27e:	f7 01       	movw	r30, r14
 280:	80 83       	st	Z, r24
	*month = I2C_Read_Ack();
 282:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Read_Ack>
 286:	f8 01       	movw	r30, r16
 288:	80 83       	st	Z, r24
	*year = I2C_Read_NAck();
 28a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Read_NAck>
 28e:	88 83       	st	Y, r24

	I2C_Stop();
 290:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Stop>
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <decToBcd>:
	
	I2C_Stop();
}

uint8_t decToBcd(uint8_t val) {
	return ((val / 10 * 16) + (val % 10));
 2a6:	9d ec       	ldi	r25, 0xCD	; 205
 2a8:	89 9f       	mul	r24, r25
 2aa:	91 2d       	mov	r25, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	96 95       	lsr	r25
 2b0:	96 95       	lsr	r25
 2b2:	96 95       	lsr	r25
 2b4:	39 2f       	mov	r19, r25
 2b6:	33 0f       	add	r19, r19
 2b8:	23 2f       	mov	r18, r19
 2ba:	22 0f       	add	r18, r18
 2bc:	22 0f       	add	r18, r18
 2be:	23 0f       	add	r18, r19
 2c0:	82 1b       	sub	r24, r18
}
 2c2:	20 e1       	ldi	r18, 0x10	; 16
 2c4:	92 9f       	mul	r25, r18
 2c6:	80 0d       	add	r24, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	08 95       	ret

000002cc <DS3231_SetDate>:
	*year = I2C_Read_NAck();

	I2C_Stop();
}

void DS3231_SetDate(uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	08 2f       	mov	r16, r24
 2d6:	16 2f       	mov	r17, r22
 2d8:	d4 2f       	mov	r29, r20
 2da:	c2 2f       	mov	r28, r18
	I2C_Start();
 2dc:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Send DS3231 address with write flag
 2e0:	80 ed       	ldi	r24, 0xD0	; 208
 2e2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(0x03); // Start from register 0x03 (day register)
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	
	I2C_Write(decToBcd(day)); // Write day in BCD format
 2ec:	80 2f       	mov	r24, r16
 2ee:	0e 94 53 01 	call	0x2a6	; 0x2a6 <decToBcd>
 2f2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(decToBcd(date)); // Write date in BCD format
 2f6:	81 2f       	mov	r24, r17
 2f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <decToBcd>
 2fc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(decToBcd(month)); // Write month in BCD format
 300:	8d 2f       	mov	r24, r29
 302:	0e 94 53 01 	call	0x2a6	; 0x2a6 <decToBcd>
 306:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(decToBcd(year)); // Write year in BCD format
 30a:	8c 2f       	mov	r24, r28
 30c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <decToBcd>
 310:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	
	I2C_Stop();
 314:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Stop>
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <DS3231_SetTime>:

uint8_t decToBcd(uint8_t val) {
	return ((val / 10 * 16) + (val % 10));
}

void DS3231_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	c8 2f       	mov	r28, r24
 32a:	d6 2f       	mov	r29, r22
 32c:	14 2f       	mov	r17, r20
	I2C_Start();
 32e:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Send DS3231 address with write flag
 332:	80 ed       	ldi	r24, 0xD0	; 208
 334:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(0x00); // Start from register 0x00 (seconds register)
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	
	I2C_Write(decToBcd(seconds)); // Write seconds in BCD format
 33e:	81 2f       	mov	r24, r17
 340:	0e 94 53 01 	call	0x2a6	; 0x2a6 <decToBcd>
 344:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(decToBcd(minutes)); // Write minutes in BCD format
 348:	8d 2f       	mov	r24, r29
 34a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <decToBcd>
 34e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	I2C_Write(decToBcd(hours)); // Write hours in BCD format
 352:	8c 2f       	mov	r24, r28
 354:	0e 94 53 01 	call	0x2a6	; 0x2a6 <decToBcd>
 358:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Write>
	
	I2C_Stop();
 35c:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Stop>
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	08 95       	ret

00000368 <main>:

//volatile int transmision_activa = 1; // Bandera para indicar si la transmisión está activa (1) o detenida (0)

int main(void){

	UART_init();   // Inicializar UART
 368:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <UART_init>
	sei();         // Activar máscara de interrupciones
 36c:	78 94       	sei
	
	
	UART_sendString(bienvenida); // Enviar mensaje de inicio/bienvenida
 36e:	84 e1       	ldi	r24, 0x14	; 20
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 db 02 	call	0x5b6	; 0x5b6 <UART_sendString>

	// Initialize the DS3231
	DS3231_Init();
 376:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DS3231_Init>

	// Set the desired time: hours, minutes, seconds
	DS3231_SetTime(14, 30, 0); // 14:30:00 (2:30 PM)
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	6e e1       	ldi	r22, 0x1E	; 30
 37e:	8e e0       	ldi	r24, 0x0E	; 14
 380:	0e 94 91 01 	call	0x322	; 0x322 <DS3231_SetTime>

	// Set the desired date: day, date, month, year
	DS3231_SetDate(1, 9, 6, 24); // Monday, 09 June 2024 (1 for Monday, 0 for Sunday)
 384:	28 e1       	ldi	r18, 0x18	; 24
 386:	46 e0       	ldi	r20, 0x06	; 6
 388:	69 e0       	ldi	r22, 0x09	; 9
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 66 01 	call	0x2cc	; 0x2cc <DS3231_SetDate>
	
	while (1){
		if (UART_hayComando()) {  // Si hay comando nuevo
 390:	0e 94 f7 02 	call	0x5ee	; 0x5ee <UART_hayComando>
 394:	88 23       	and	r24, r24
 396:	21 f1       	breq	.+72     	; 0x3e0 <main+0x78>
			char *comando = UART_getComando();
 398:	0e 94 ff 02 	call	0x5fe	; 0x5fe <UART_getComando>
			int resultado = Terminal_procesarcomando(comando);
 39c:	0e 94 2d 02 	call	0x45a	; 0x45a <Terminal_procesarcomando>
			if (resultado == 1) {
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	c1 f4       	brne	.+48     	; 0x3d4 <main+0x6c>
				// Detener o reanudar la transmisión según el comando anterior
				if (comando_anterior == 1) {
 3a4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <comando_anterior>
 3a8:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <comando_anterior+0x1>
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	29 f4       	brne	.+10     	; 0x3ba <main+0x52>
					transmision_activa = 0; // Detener transmisión
 3b0:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <transmision_activa+0x1>
 3b4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <transmision_activa>
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <main+0x5e>
					} else {
					transmision_activa = 1; // Reanudar transmisión
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <transmision_activa+0x1>
 3c2:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <transmision_activa>
				}
				comando_anterior = 1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <comando_anterior+0x1>
 3ce:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <comando_anterior>
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <main+0x74>
				} else {
				UART_sendString(novalido); // Enviar mensaje de comando no válido
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <UART_sendString>
			}
			UART_setHayComando(); // Avisar que el comando ya fue procesado
 3dc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <UART_setHayComando>
		}

		if (transmision_activa) {
 3e0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <transmision_activa>
 3e4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <transmision_activa+0x1>
 3e8:	89 2b       	or	r24, r25
 3ea:	91 f2       	breq	.-92     	; 0x390 <main+0x28>
			Terminal_sendDatos();  // Obtener y enviar datos del sensor
 3ec:	0e 94 48 02 	call	0x490	; 0x490 <Terminal_sendDatos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	87 ea       	ldi	r24, 0xA7	; 167
 3f4:	91 e6       	ldi	r25, 0x61	; 97
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x8e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
 402:	c6 cf       	rjmp	.-116    	; 0x390 <main+0x28>

00000404 <SerialPort_Init>:

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}
 404:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 408:	96 e0       	ldi	r25, 0x06	; 6
 40a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 40e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 412:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 416:	08 95       	ret

00000418 <SerialPort_TX_Enable>:
 418:	e1 ec       	ldi	r30, 0xC1	; 193
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	88 60       	ori	r24, 0x08	; 8
 420:	80 83       	st	Z, r24
 422:	08 95       	ret

00000424 <SerialPort_TX_Interrupt_Enable>:
 424:	e1 ec       	ldi	r30, 0xC1	; 193
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	80 62       	ori	r24, 0x20	; 32
 42c:	80 83       	st	Z, r24
 42e:	08 95       	ret

00000430 <SerialPort_TX_Interrupt_Disable>:
 430:	e1 ec       	ldi	r30, 0xC1	; 193
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	80 83       	st	Z, r24
 43a:	08 95       	ret

0000043c <SerialPort_RX_Enable>:
 43c:	e1 ec       	ldi	r30, 0xC1	; 193
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	80 61       	ori	r24, 0x10	; 16
 444:	80 83       	st	Z, r24
 446:	08 95       	ret

00000448 <SerialPort_RX_Interrupt_Enable>:
 448:	e1 ec       	ldi	r30, 0xC1	; 193
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	80 68       	ori	r24, 0x80	; 128
 450:	80 83       	st	Z, r24
 452:	08 95       	ret

00000454 <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 454:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 458:	08 95       	ret

0000045a <Terminal_procesarcomando>:

#include "terminal.h"

int Terminal_procesarcomando(char *s){
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24
	if (!strcmp(s,'S') || !strcmp(s,'s')) { // Comando para detener/reanudar transmisión
 460:	63 e5       	ldi	r22, 0x53	; 83
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 53 03 	call	0x6a6	; 0x6a6 <strcmp>
 468:	89 2b       	or	r24, r25
 46a:	51 f0       	breq	.+20     	; 0x480 <Terminal_procesarcomando+0x26>
 46c:	63 e7       	ldi	r22, 0x73	; 115
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	ce 01       	movw	r24, r28
 472:	0e 94 53 03 	call	0x6a6	; 0x6a6 <strcmp>
 476:	89 2b       	or	r24, r25
 478:	31 f4       	brne	.+12     	; 0x486 <Terminal_procesarcomando+0x2c>
		return 1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	05 c0       	rjmp	.+10     	; 0x48a <Terminal_procesarcomando+0x30>
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <Terminal_procesarcomando+0x30>
	}
	else {
		return 2;// Comando no válido
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <Terminal_sendDatos>:


void Terminal_sendDatos(){
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	c3 57       	subi	r28, 0x73	; 115
 49e:	d1 09       	sbc	r29, r1
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
	char temperaturayhumedad[50]; // Ampliamos el tamaño del buffer para dar espacio a la fecha y hora
	char dataBuffer[100];
	int humedad, humedad_decimal, temperatura_decimal, temperatura;
	uint8_t hours, minutes, seconds;
	uint8_t day, date, month, year;
	DHT11_obtenerDatos(&temperatura, &temperatura_decimal, &humedad, &humedad_decimal );
 4aa:	9e 01       	movw	r18, r28
 4ac:	29 59       	subi	r18, 0x99	; 153
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	ae 01       	movw	r20, r28
 4b2:	4b 59       	subi	r20, 0x9B	; 155
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	be 01       	movw	r22, r28
 4b8:	67 59       	subi	r22, 0x97	; 151
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	ce 01       	movw	r24, r28
 4be:	85 59       	subi	r24, 0x95	; 149
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	0e 94 90 00 	call	0x120	; 0x120 <DHT11_obtenerDatos>
	
	// Obtain time from DS3231
	DS3231_GetTime(&hours, &minutes, &seconds);
 4c6:	ae 01       	movw	r20, r28
 4c8:	41 59       	subi	r20, 0x91	; 145
 4ca:	5f 4f       	sbci	r21, 0xFF	; 255
 4cc:	be 01       	movw	r22, r28
 4ce:	62 59       	subi	r22, 0x92	; 146
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	ce 01       	movw	r24, r28
 4d4:	83 59       	subi	r24, 0x93	; 147
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DS3231_GetTime>

	// Obtain date from DS3231
	DS3231_GetDate(&day, &date, &month, &year);
 4dc:	9e 01       	movw	r18, r28
 4de:	2d 58       	subi	r18, 0x8D	; 141
 4e0:	3f 4f       	sbci	r19, 0xFF	; 255
 4e2:	ae 01       	movw	r20, r28
 4e4:	4e 58       	subi	r20, 0x8E	; 142
 4e6:	5f 4f       	sbci	r21, 0xFF	; 255
 4e8:	be 01       	movw	r22, r28
 4ea:	6f 58       	subi	r22, 0x8F	; 143
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	ce 01       	movw	r24, r28
 4f0:	80 59       	subi	r24, 0x90	; 144
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	0e 94 20 01 	call	0x240	; 0x240 <DS3231_GetDate>
	// Obtener datos del sensor y formatearlos
	sprintf(dataBuffer, "TEMP: %d.%d °C HUM: %d%% FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n",
 4f8:	e0 96       	adiw	r28, 0x30	; 48
 4fa:	8f ad       	ldd	r24, Y+63	; 0x3f
 4fc:	e0 97       	sbiw	r28, 0x30	; 48
 4fe:	1f 92       	push	r1
 500:	8f 93       	push	r24
 502:	af 96       	adiw	r28, 0x2f	; 47
 504:	8f ad       	ldd	r24, Y+63	; 0x3f
 506:	af 97       	sbiw	r28, 0x2f	; 47
 508:	1f 92       	push	r1
 50a:	8f 93       	push	r24
 50c:	ae 96       	adiw	r28, 0x2e	; 46
 50e:	8f ad       	ldd	r24, Y+63	; 0x3f
 510:	ae 97       	sbiw	r28, 0x2e	; 46
 512:	1f 92       	push	r1
 514:	8f 93       	push	r24
 516:	e4 96       	adiw	r28, 0x34	; 52
 518:	8f ad       	ldd	r24, Y+63	; 0x3f
 51a:	e4 97       	sbiw	r28, 0x34	; 52
 51c:	1f 92       	push	r1
 51e:	8f 93       	push	r24
 520:	e3 96       	adiw	r28, 0x33	; 51
 522:	8f ad       	ldd	r24, Y+63	; 0x3f
 524:	e3 97       	sbiw	r28, 0x33	; 51
 526:	1f 92       	push	r1
 528:	8f 93       	push	r24
 52a:	e2 96       	adiw	r28, 0x32	; 50
 52c:	8f ad       	ldd	r24, Y+63	; 0x3f
 52e:	e2 97       	sbiw	r28, 0x32	; 50
 530:	1f 92       	push	r1
 532:	8f 93       	push	r24
 534:	a7 96       	adiw	r28, 0x27	; 39
 536:	8f ad       	ldd	r24, Y+63	; 0x3f
 538:	a7 97       	sbiw	r28, 0x27	; 39
 53a:	8f 93       	push	r24
 53c:	a6 96       	adiw	r28, 0x26	; 38
 53e:	8f ad       	ldd	r24, Y+63	; 0x3f
 540:	a6 97       	sbiw	r28, 0x26	; 38
 542:	8f 93       	push	r24
 544:	ab 96       	adiw	r28, 0x2b	; 43
 546:	8f ad       	ldd	r24, Y+63	; 0x3f
 548:	ab 97       	sbiw	r28, 0x2b	; 43
 54a:	8f 93       	push	r24
 54c:	aa 96       	adiw	r28, 0x2a	; 42
 54e:	8f ad       	ldd	r24, Y+63	; 0x3f
 550:	aa 97       	sbiw	r28, 0x2a	; 42
 552:	8f 93       	push	r24
 554:	ad 96       	adiw	r28, 0x2d	; 45
 556:	8f ad       	ldd	r24, Y+63	; 0x3f
 558:	ad 97       	sbiw	r28, 0x2d	; 45
 55a:	8f 93       	push	r24
 55c:	ac 96       	adiw	r28, 0x2c	; 44
 55e:	8f ad       	ldd	r24, Y+63	; 0x3f
 560:	ac 97       	sbiw	r28, 0x2c	; 44
 562:	8f 93       	push	r24
 564:	8b e6       	ldi	r24, 0x6B	; 107
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	9f 93       	push	r25
 56a:	8f 93       	push	r24
 56c:	8e 01       	movw	r16, r28
 56e:	0f 5f       	subi	r16, 0xFF	; 255
 570:	1f 4f       	sbci	r17, 0xFF	; 255
 572:	1f 93       	push	r17
 574:	0f 93       	push	r16
 576:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sprintf>
	temperatura, temperatura_decimal, humedad, date, month, year, hours, minutes, seconds);


	// Send the formatted string over UART
	UART_sendString(dataBuffer);
 57a:	c8 01       	movw	r24, r16
 57c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <UART_sendString>
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	cd 58       	subi	r28, 0x8D	; 141
 58c:	df 4f       	sbci	r29, 0xFF	; 255
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <UART_init>:
volatile unsigned char nuevoDato = 0;

static int nuevoComando = 0;

void UART_init(){
	SerialPort_Init(0x67); //inicializar puerto serie
 5a2:	87 e6       	ldi	r24, 0x67	; 103
 5a4:	0e 94 02 02 	call	0x404	; 0x404 <SerialPort_Init>
	SerialPort_TX_Enable(); //habilitar transmisor TX
 5a8:	0e 94 0c 02 	call	0x418	; 0x418 <SerialPort_TX_Enable>
	SerialPort_RX_Enable(); //habilitar receptor RX
 5ac:	0e 94 1e 02 	call	0x43c	; 0x43c <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); //habilitar interrupciones de recepción
 5b0:	0e 94 24 02 	call	0x448	; 0x448 <SerialPort_RX_Interrupt_Enable>
 5b4:	08 95       	ret

000005b6 <UART_sendString>:
}

void UART_sendString(char* s){
 5b6:	ac 01       	movw	r20, r24
	unsigned char indice = 0;
 5b8:	20 e0       	ldi	r18, 0x00	; 0
	while(s[indice] != '\0'){ //Mientras no llegue al fin de la cadena
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <UART_sendString+0x20>
		if(TX_indiceescritura < 105){ // si el indice es menor al tamaño máximo del buffer
 5bc:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <TX_indiceescritura>
 5c0:	99 36       	cpi	r25, 0x69	; 105
 5c2:	40 f4       	brcc	.+16     	; 0x5d4 <UART_sendString+0x1e>
			TX_Buffer[TX_indiceescritura] = s[indice]; //Guardar caracter en buffer
 5c4:	e9 2f       	mov	r30, r25
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	e0 54       	subi	r30, 0x40	; 64
 5ca:	fe 4f       	sbci	r31, 0xFE	; 254
 5cc:	30 83       	st	Z, r19
			TX_indiceescritura++;
 5ce:	9f 5f       	subi	r25, 0xFF	; 255
 5d0:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <TX_indiceescritura>
		}
		indice++;
 5d4:	2f 5f       	subi	r18, 0xFF	; 255
	SerialPort_RX_Interrupt_Enable(); //habilitar interrupciones de recepción
}

void UART_sendString(char* s){
	unsigned char indice = 0;
	while(s[indice] != '\0'){ //Mientras no llegue al fin de la cadena
 5d6:	fa 01       	movw	r30, r20
 5d8:	e2 0f       	add	r30, r18
 5da:	f1 1d       	adc	r31, r1
 5dc:	30 81       	ld	r19, Z
 5de:	31 11       	cpse	r19, r1
 5e0:	ed cf       	rjmp	.-38     	; 0x5bc <UART_sendString+0x6>
			TX_Buffer[TX_indiceescritura] = s[indice]; //Guardar caracter en buffer
			TX_indiceescritura++;
		}
		indice++;
	}
	hayString = 1; //Activo flag
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <hayString>
	SerialPort_TX_Interrupt_Enable(); // Activo interrupción de transmisión
 5e8:	0e 94 12 02 	call	0x424	; 0x424 <SerialPort_TX_Interrupt_Enable>
 5ec:	08 95       	ret

000005ee <UART_hayComando>:
}

char UART_hayComando(){
	return nuevoComando; //Retorna si 1 si hay comando para procesar y 0 en caso contrario
}
 5ee:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
 5f2:	08 95       	ret

000005f4 <UART_setHayComando>:

void UART_setHayComando(){
	nuevoComando=0; // Setea el valor de nuevo comando en 0
 5f4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <__data_end+0x1>
 5f8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <__data_end>
 5fc:	08 95       	ret

000005fe <UART_getComando>:
}

char* UART_getComando(){
	return RX_Buffer; //Retorna la cadena de caracteres del comando ingresado
}
 5fe:	86 eb       	ldi	r24, 0xB6	; 182
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	08 95       	ret

00000604 <__vector_18>:

ISR(USART_RX_vect){
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	8f 93       	push	r24
	dato = UDR0;
 610:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	nuevoDato = 1; // Activa el indicador de nuevo dato
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <nuevoDato>
	// El resto del código ISR sigue igual
}
 61a:	8f 91       	pop	r24
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <__vector_19>:

ISR(USART_UDRE_vect){
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
	if(hayString){ // Si hay cadena para transmitir
 648:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <hayString>
 64c:	88 23       	and	r24, r24
 64e:	d1 f0       	breq	.+52     	; 0x684 <__vector_19+0x5e>
		if (TX_indicelectura<TX_indiceescritura){ //si sigue habiendo datos
 650:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <TX_indicelectura>
 654:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <TX_indiceescritura>
 658:	e8 17       	cp	r30, r24
 65a:	60 f4       	brcc	.+24     	; 0x674 <__vector_19+0x4e>
			SerialPort_Send_Data(TX_Buffer[TX_indicelectura]); //Envio dato
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	e0 54       	subi	r30, 0x40	; 64
 660:	fe 4f       	sbci	r31, 0xFE	; 254
 662:	80 81       	ld	r24, Z
 664:	0e 94 2a 02 	call	0x454	; 0x454 <SerialPort_Send_Data>
			TX_indicelectura++;
 668:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <TX_indicelectura>
 66c:	8f 5f       	subi	r24, 0xFF	; 255
 66e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <TX_indicelectura>
 672:	08 c0       	rjmp	.+16     	; 0x684 <__vector_19+0x5e>
		}
		else {
			hayString = 0; // Termino de transmitir
 674:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <hayString>
			TX_indicelectura = 0;
 678:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <TX_indicelectura>
			TX_indiceescritura = 0;
 67c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <TX_indiceescritura>
			SerialPort_TX_Interrupt_Disable(); //Deshabilitar interrupción de transmisión
 680:	0e 94 18 02 	call	0x430	; 0x430 <SerialPort_TX_Interrupt_Disable>
		}
	}
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <strcmp>:
 6a6:	fb 01       	movw	r30, r22
 6a8:	dc 01       	movw	r26, r24
 6aa:	8d 91       	ld	r24, X+
 6ac:	01 90       	ld	r0, Z+
 6ae:	80 19       	sub	r24, r0
 6b0:	01 10       	cpse	r0, r1
 6b2:	d9 f3       	breq	.-10     	; 0x6aa <strcmp+0x4>
 6b4:	99 0b       	sbc	r25, r25
 6b6:	08 95       	ret

000006b8 <sprintf>:
 6b8:	ae e0       	ldi	r26, 0x0E	; 14
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e2 e6       	ldi	r30, 0x62	; 98
 6be:	f3 e0       	ldi	r31, 0x03	; 3
 6c0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__prologue_saves__+0x1c>
 6c4:	0d 89       	ldd	r16, Y+21	; 0x15
 6c6:	1e 89       	ldd	r17, Y+22	; 0x16
 6c8:	86 e0       	ldi	r24, 0x06	; 6
 6ca:	8c 83       	std	Y+4, r24	; 0x04
 6cc:	1a 83       	std	Y+2, r17	; 0x02
 6ce:	09 83       	std	Y+1, r16	; 0x01
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	9f e7       	ldi	r25, 0x7F	; 127
 6d4:	9e 83       	std	Y+6, r25	; 0x06
 6d6:	8d 83       	std	Y+5, r24	; 0x05
 6d8:	ae 01       	movw	r20, r28
 6da:	47 5e       	subi	r20, 0xE7	; 231
 6dc:	5f 4f       	sbci	r21, 0xFF	; 255
 6de:	6f 89       	ldd	r22, Y+23	; 0x17
 6e0:	78 8d       	ldd	r23, Y+24	; 0x18
 6e2:	ce 01       	movw	r24, r28
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vfprintf>
 6ea:	ef 81       	ldd	r30, Y+7	; 0x07
 6ec:	f8 85       	ldd	r31, Y+8	; 0x08
 6ee:	e0 0f       	add	r30, r16
 6f0:	f1 1f       	adc	r31, r17
 6f2:	10 82       	st	Z, r1
 6f4:	2e 96       	adiw	r28, 0x0e	; 14
 6f6:	e4 e0       	ldi	r30, 0x04	; 4
 6f8:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__epilogue_restores__+0x1c>

000006fc <vfprintf>:
 6fc:	ab e0       	ldi	r26, 0x0B	; 11
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	e4 e8       	ldi	r30, 0x84	; 132
 702:	f3 e0       	ldi	r31, 0x03	; 3
 704:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__prologue_saves__>
 708:	6c 01       	movw	r12, r24
 70a:	7b 01       	movw	r14, r22
 70c:	8a 01       	movw	r16, r20
 70e:	fc 01       	movw	r30, r24
 710:	17 82       	std	Z+7, r1	; 0x07
 712:	16 82       	std	Z+6, r1	; 0x06
 714:	83 81       	ldd	r24, Z+3	; 0x03
 716:	81 ff       	sbrs	r24, 1
 718:	cc c1       	rjmp	.+920    	; 0xab2 <__stack+0x1b3>
 71a:	ce 01       	movw	r24, r28
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	3c 01       	movw	r6, r24
 720:	f6 01       	movw	r30, r12
 722:	93 81       	ldd	r25, Z+3	; 0x03
 724:	f7 01       	movw	r30, r14
 726:	93 fd       	sbrc	r25, 3
 728:	85 91       	lpm	r24, Z+
 72a:	93 ff       	sbrs	r25, 3
 72c:	81 91       	ld	r24, Z+
 72e:	7f 01       	movw	r14, r30
 730:	88 23       	and	r24, r24
 732:	09 f4       	brne	.+2      	; 0x736 <vfprintf+0x3a>
 734:	ba c1       	rjmp	.+884    	; 0xaaa <__stack+0x1ab>
 736:	85 32       	cpi	r24, 0x25	; 37
 738:	39 f4       	brne	.+14     	; 0x748 <vfprintf+0x4c>
 73a:	93 fd       	sbrc	r25, 3
 73c:	85 91       	lpm	r24, Z+
 73e:	93 ff       	sbrs	r25, 3
 740:	81 91       	ld	r24, Z+
 742:	7f 01       	movw	r14, r30
 744:	85 32       	cpi	r24, 0x25	; 37
 746:	29 f4       	brne	.+10     	; 0x752 <vfprintf+0x56>
 748:	b6 01       	movw	r22, r12
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 750:	e7 cf       	rjmp	.-50     	; 0x720 <vfprintf+0x24>
 752:	91 2c       	mov	r9, r1
 754:	21 2c       	mov	r2, r1
 756:	31 2c       	mov	r3, r1
 758:	ff e1       	ldi	r31, 0x1F	; 31
 75a:	f3 15       	cp	r31, r3
 75c:	d8 f0       	brcs	.+54     	; 0x794 <vfprintf+0x98>
 75e:	8b 32       	cpi	r24, 0x2B	; 43
 760:	79 f0       	breq	.+30     	; 0x780 <vfprintf+0x84>
 762:	38 f4       	brcc	.+14     	; 0x772 <vfprintf+0x76>
 764:	80 32       	cpi	r24, 0x20	; 32
 766:	79 f0       	breq	.+30     	; 0x786 <vfprintf+0x8a>
 768:	83 32       	cpi	r24, 0x23	; 35
 76a:	a1 f4       	brne	.+40     	; 0x794 <vfprintf+0x98>
 76c:	23 2d       	mov	r18, r3
 76e:	20 61       	ori	r18, 0x10	; 16
 770:	1d c0       	rjmp	.+58     	; 0x7ac <vfprintf+0xb0>
 772:	8d 32       	cpi	r24, 0x2D	; 45
 774:	61 f0       	breq	.+24     	; 0x78e <vfprintf+0x92>
 776:	80 33       	cpi	r24, 0x30	; 48
 778:	69 f4       	brne	.+26     	; 0x794 <vfprintf+0x98>
 77a:	23 2d       	mov	r18, r3
 77c:	21 60       	ori	r18, 0x01	; 1
 77e:	16 c0       	rjmp	.+44     	; 0x7ac <vfprintf+0xb0>
 780:	83 2d       	mov	r24, r3
 782:	82 60       	ori	r24, 0x02	; 2
 784:	38 2e       	mov	r3, r24
 786:	e3 2d       	mov	r30, r3
 788:	e4 60       	ori	r30, 0x04	; 4
 78a:	3e 2e       	mov	r3, r30
 78c:	2a c0       	rjmp	.+84     	; 0x7e2 <vfprintf+0xe6>
 78e:	f3 2d       	mov	r31, r3
 790:	f8 60       	ori	r31, 0x08	; 8
 792:	1d c0       	rjmp	.+58     	; 0x7ce <vfprintf+0xd2>
 794:	37 fc       	sbrc	r3, 7
 796:	2d c0       	rjmp	.+90     	; 0x7f2 <vfprintf+0xf6>
 798:	20 ed       	ldi	r18, 0xD0	; 208
 79a:	28 0f       	add	r18, r24
 79c:	2a 30       	cpi	r18, 0x0A	; 10
 79e:	40 f0       	brcs	.+16     	; 0x7b0 <vfprintf+0xb4>
 7a0:	8e 32       	cpi	r24, 0x2E	; 46
 7a2:	b9 f4       	brne	.+46     	; 0x7d2 <vfprintf+0xd6>
 7a4:	36 fc       	sbrc	r3, 6
 7a6:	81 c1       	rjmp	.+770    	; 0xaaa <__stack+0x1ab>
 7a8:	23 2d       	mov	r18, r3
 7aa:	20 64       	ori	r18, 0x40	; 64
 7ac:	32 2e       	mov	r3, r18
 7ae:	19 c0       	rjmp	.+50     	; 0x7e2 <vfprintf+0xe6>
 7b0:	36 fe       	sbrs	r3, 6
 7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <vfprintf+0xc4>
 7b4:	8a e0       	ldi	r24, 0x0A	; 10
 7b6:	98 9e       	mul	r9, r24
 7b8:	20 0d       	add	r18, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	92 2e       	mov	r9, r18
 7be:	11 c0       	rjmp	.+34     	; 0x7e2 <vfprintf+0xe6>
 7c0:	ea e0       	ldi	r30, 0x0A	; 10
 7c2:	2e 9e       	mul	r2, r30
 7c4:	20 0d       	add	r18, r0
 7c6:	11 24       	eor	r1, r1
 7c8:	22 2e       	mov	r2, r18
 7ca:	f3 2d       	mov	r31, r3
 7cc:	f0 62       	ori	r31, 0x20	; 32
 7ce:	3f 2e       	mov	r3, r31
 7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <vfprintf+0xe6>
 7d2:	8c 36       	cpi	r24, 0x6C	; 108
 7d4:	21 f4       	brne	.+8      	; 0x7de <vfprintf+0xe2>
 7d6:	83 2d       	mov	r24, r3
 7d8:	80 68       	ori	r24, 0x80	; 128
 7da:	38 2e       	mov	r3, r24
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0xe6>
 7de:	88 36       	cpi	r24, 0x68	; 104
 7e0:	41 f4       	brne	.+16     	; 0x7f2 <vfprintf+0xf6>
 7e2:	f7 01       	movw	r30, r14
 7e4:	93 fd       	sbrc	r25, 3
 7e6:	85 91       	lpm	r24, Z+
 7e8:	93 ff       	sbrs	r25, 3
 7ea:	81 91       	ld	r24, Z+
 7ec:	7f 01       	movw	r14, r30
 7ee:	81 11       	cpse	r24, r1
 7f0:	b3 cf       	rjmp	.-154    	; 0x758 <vfprintf+0x5c>
 7f2:	98 2f       	mov	r25, r24
 7f4:	9f 7d       	andi	r25, 0xDF	; 223
 7f6:	95 54       	subi	r25, 0x45	; 69
 7f8:	93 30       	cpi	r25, 0x03	; 3
 7fa:	28 f4       	brcc	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fc:	0c 5f       	subi	r16, 0xFC	; 252
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	9f e3       	ldi	r25, 0x3F	; 63
 802:	99 83       	std	Y+1, r25	; 0x01
 804:	0d c0       	rjmp	.+26     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 806:	83 36       	cpi	r24, 0x63	; 99
 808:	31 f0       	breq	.+12     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80a:	83 37       	cpi	r24, 0x73	; 115
 80c:	71 f0       	breq	.+28     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 80e:	83 35       	cpi	r24, 0x53	; 83
 810:	09 f0       	breq	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 812:	59 c0       	rjmp	.+178    	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 814:	21 c0       	rjmp	.+66     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 816:	f8 01       	movw	r30, r16
 818:	80 81       	ld	r24, Z
 81a:	89 83       	std	Y+1, r24	; 0x01
 81c:	0e 5f       	subi	r16, 0xFE	; 254
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	88 24       	eor	r8, r8
 822:	83 94       	inc	r8
 824:	91 2c       	mov	r9, r1
 826:	53 01       	movw	r10, r6
 828:	13 c0       	rjmp	.+38     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 82a:	28 01       	movw	r4, r16
 82c:	f2 e0       	ldi	r31, 0x02	; 2
 82e:	4f 0e       	add	r4, r31
 830:	51 1c       	adc	r5, r1
 832:	f8 01       	movw	r30, r16
 834:	a0 80       	ld	r10, Z
 836:	b1 80       	ldd	r11, Z+1	; 0x01
 838:	36 fe       	sbrs	r3, 6
 83a:	03 c0       	rjmp	.+6      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83c:	69 2d       	mov	r22, r9
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	6f ef       	ldi	r22, 0xFF	; 255
 844:	7f ef       	ldi	r23, 0xFF	; 255
 846:	c5 01       	movw	r24, r10
 848:	0e 94 6a 05 	call	0xad4	; 0xad4 <strnlen>
 84c:	4c 01       	movw	r8, r24
 84e:	82 01       	movw	r16, r4
 850:	f3 2d       	mov	r31, r3
 852:	ff 77       	andi	r31, 0x7F	; 127
 854:	3f 2e       	mov	r3, r31
 856:	16 c0       	rjmp	.+44     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 858:	28 01       	movw	r4, r16
 85a:	22 e0       	ldi	r18, 0x02	; 2
 85c:	42 0e       	add	r4, r18
 85e:	51 1c       	adc	r5, r1
 860:	f8 01       	movw	r30, r16
 862:	a0 80       	ld	r10, Z
 864:	b1 80       	ldd	r11, Z+1	; 0x01
 866:	36 fe       	sbrs	r3, 6
 868:	03 c0       	rjmp	.+6      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86a:	69 2d       	mov	r22, r9
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 870:	6f ef       	ldi	r22, 0xFF	; 255
 872:	7f ef       	ldi	r23, 0xFF	; 255
 874:	c5 01       	movw	r24, r10
 876:	0e 94 5f 05 	call	0xabe	; 0xabe <strnlen_P>
 87a:	4c 01       	movw	r8, r24
 87c:	f3 2d       	mov	r31, r3
 87e:	f0 68       	ori	r31, 0x80	; 128
 880:	3f 2e       	mov	r3, r31
 882:	82 01       	movw	r16, r4
 884:	33 fc       	sbrc	r3, 3
 886:	1b c0       	rjmp	.+54     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 888:	82 2d       	mov	r24, r2
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	88 16       	cp	r8, r24
 88e:	99 06       	cpc	r9, r25
 890:	b0 f4       	brcc	.+44     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 892:	b6 01       	movw	r22, r12
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 89c:	2a 94       	dec	r2
 89e:	f4 cf       	rjmp	.-24     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 8a0:	f5 01       	movw	r30, r10
 8a2:	37 fc       	sbrc	r3, 7
 8a4:	85 91       	lpm	r24, Z+
 8a6:	37 fe       	sbrs	r3, 7
 8a8:	81 91       	ld	r24, Z+
 8aa:	5f 01       	movw	r10, r30
 8ac:	b6 01       	movw	r22, r12
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 8b4:	21 10       	cpse	r2, r1
 8b6:	2a 94       	dec	r2
 8b8:	21 e0       	ldi	r18, 0x01	; 1
 8ba:	82 1a       	sub	r8, r18
 8bc:	91 08       	sbc	r9, r1
 8be:	81 14       	cp	r8, r1
 8c0:	91 04       	cpc	r9, r1
 8c2:	71 f7       	brne	.-36     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 8c4:	e8 c0       	rjmp	.+464    	; 0xa96 <__stack+0x197>
 8c6:	84 36       	cpi	r24, 0x64	; 100
 8c8:	11 f0       	breq	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ca:	89 36       	cpi	r24, 0x69	; 105
 8cc:	41 f5       	brne	.+80     	; 0x91e <__stack+0x1f>
 8ce:	f8 01       	movw	r30, r16
 8d0:	37 fe       	sbrs	r3, 7
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	93 81       	ldd	r25, Z+3	; 0x03
 8dc:	0c 5f       	subi	r16, 0xFC	; 252
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	08 c0       	rjmp	.+16     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	07 2e       	mov	r0, r23
 8e8:	00 0c       	add	r0, r0
 8ea:	88 0b       	sbc	r24, r24
 8ec:	99 0b       	sbc	r25, r25
 8ee:	0e 5f       	subi	r16, 0xFE	; 254
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	f3 2d       	mov	r31, r3
 8f4:	ff 76       	andi	r31, 0x6F	; 111
 8f6:	3f 2e       	mov	r3, r31
 8f8:	97 ff       	sbrs	r25, 7
 8fa:	09 c0       	rjmp	.+18     	; 0x90e <__stack+0xf>
 8fc:	90 95       	com	r25
 8fe:	80 95       	com	r24
 900:	70 95       	com	r23
 902:	61 95       	neg	r22
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	f0 68       	ori	r31, 0x80	; 128
 90c:	3f 2e       	mov	r3, r31
 90e:	2a e0       	ldi	r18, 0x0A	; 10
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	a3 01       	movw	r20, r6
 914:	0e 94 b1 05 	call	0xb62	; 0xb62 <__ultoa_invert>
 918:	88 2e       	mov	r8, r24
 91a:	86 18       	sub	r8, r6
 91c:	45 c0       	rjmp	.+138    	; 0x9a8 <__stack+0xa9>
 91e:	85 37       	cpi	r24, 0x75	; 117
 920:	31 f4       	brne	.+12     	; 0x92e <__stack+0x2f>
 922:	23 2d       	mov	r18, r3
 924:	2f 7e       	andi	r18, 0xEF	; 239
 926:	b2 2e       	mov	r11, r18
 928:	2a e0       	ldi	r18, 0x0A	; 10
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	25 c0       	rjmp	.+74     	; 0x978 <__stack+0x79>
 92e:	93 2d       	mov	r25, r3
 930:	99 7f       	andi	r25, 0xF9	; 249
 932:	b9 2e       	mov	r11, r25
 934:	8f 36       	cpi	r24, 0x6F	; 111
 936:	c1 f0       	breq	.+48     	; 0x968 <__stack+0x69>
 938:	18 f4       	brcc	.+6      	; 0x940 <__stack+0x41>
 93a:	88 35       	cpi	r24, 0x58	; 88
 93c:	79 f0       	breq	.+30     	; 0x95c <__stack+0x5d>
 93e:	b5 c0       	rjmp	.+362    	; 0xaaa <__stack+0x1ab>
 940:	80 37       	cpi	r24, 0x70	; 112
 942:	19 f0       	breq	.+6      	; 0x94a <__stack+0x4b>
 944:	88 37       	cpi	r24, 0x78	; 120
 946:	21 f0       	breq	.+8      	; 0x950 <__stack+0x51>
 948:	b0 c0       	rjmp	.+352    	; 0xaaa <__stack+0x1ab>
 94a:	e9 2f       	mov	r30, r25
 94c:	e0 61       	ori	r30, 0x10	; 16
 94e:	be 2e       	mov	r11, r30
 950:	b4 fe       	sbrs	r11, 4
 952:	0d c0       	rjmp	.+26     	; 0x96e <__stack+0x6f>
 954:	fb 2d       	mov	r31, r11
 956:	f4 60       	ori	r31, 0x04	; 4
 958:	bf 2e       	mov	r11, r31
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__stack+0x6f>
 95c:	34 fe       	sbrs	r3, 4
 95e:	0a c0       	rjmp	.+20     	; 0x974 <__stack+0x75>
 960:	29 2f       	mov	r18, r25
 962:	26 60       	ori	r18, 0x06	; 6
 964:	b2 2e       	mov	r11, r18
 966:	06 c0       	rjmp	.+12     	; 0x974 <__stack+0x75>
 968:	28 e0       	ldi	r18, 0x08	; 8
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x79>
 96e:	20 e1       	ldi	r18, 0x10	; 16
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x79>
 974:	20 e1       	ldi	r18, 0x10	; 16
 976:	32 e0       	ldi	r19, 0x02	; 2
 978:	f8 01       	movw	r30, r16
 97a:	b7 fe       	sbrs	r11, 7
 97c:	07 c0       	rjmp	.+14     	; 0x98c <__stack+0x8d>
 97e:	60 81       	ld	r22, Z
 980:	71 81       	ldd	r23, Z+1	; 0x01
 982:	82 81       	ldd	r24, Z+2	; 0x02
 984:	93 81       	ldd	r25, Z+3	; 0x03
 986:	0c 5f       	subi	r16, 0xFC	; 252
 988:	1f 4f       	sbci	r17, 0xFF	; 255
 98a:	06 c0       	rjmp	.+12     	; 0x998 <__stack+0x99>
 98c:	60 81       	ld	r22, Z
 98e:	71 81       	ldd	r23, Z+1	; 0x01
 990:	80 e0       	ldi	r24, 0x00	; 0
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 5f       	subi	r16, 0xFE	; 254
 996:	1f 4f       	sbci	r17, 0xFF	; 255
 998:	a3 01       	movw	r20, r6
 99a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__ultoa_invert>
 99e:	88 2e       	mov	r8, r24
 9a0:	86 18       	sub	r8, r6
 9a2:	fb 2d       	mov	r31, r11
 9a4:	ff 77       	andi	r31, 0x7F	; 127
 9a6:	3f 2e       	mov	r3, r31
 9a8:	36 fe       	sbrs	r3, 6
 9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <__stack+0xc7>
 9ac:	23 2d       	mov	r18, r3
 9ae:	2e 7f       	andi	r18, 0xFE	; 254
 9b0:	a2 2e       	mov	r10, r18
 9b2:	89 14       	cp	r8, r9
 9b4:	58 f4       	brcc	.+22     	; 0x9cc <__stack+0xcd>
 9b6:	34 fe       	sbrs	r3, 4
 9b8:	0b c0       	rjmp	.+22     	; 0x9d0 <__stack+0xd1>
 9ba:	32 fc       	sbrc	r3, 2
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__stack+0xd1>
 9be:	83 2d       	mov	r24, r3
 9c0:	8e 7e       	andi	r24, 0xEE	; 238
 9c2:	a8 2e       	mov	r10, r24
 9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <__stack+0xd1>
 9c6:	b8 2c       	mov	r11, r8
 9c8:	a3 2c       	mov	r10, r3
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <__stack+0xd3>
 9cc:	b8 2c       	mov	r11, r8
 9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <__stack+0xd3>
 9d0:	b9 2c       	mov	r11, r9
 9d2:	a4 fe       	sbrs	r10, 4
 9d4:	0f c0       	rjmp	.+30     	; 0x9f4 <__stack+0xf5>
 9d6:	fe 01       	movw	r30, r28
 9d8:	e8 0d       	add	r30, r8
 9da:	f1 1d       	adc	r31, r1
 9dc:	80 81       	ld	r24, Z
 9de:	80 33       	cpi	r24, 0x30	; 48
 9e0:	21 f4       	brne	.+8      	; 0x9ea <__stack+0xeb>
 9e2:	9a 2d       	mov	r25, r10
 9e4:	99 7e       	andi	r25, 0xE9	; 233
 9e6:	a9 2e       	mov	r10, r25
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <__stack+0xfd>
 9ea:	a2 fe       	sbrs	r10, 2
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <__stack+0xfb>
 9ee:	b3 94       	inc	r11
 9f0:	b3 94       	inc	r11
 9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__stack+0xfd>
 9f4:	8a 2d       	mov	r24, r10
 9f6:	86 78       	andi	r24, 0x86	; 134
 9f8:	09 f0       	breq	.+2      	; 0x9fc <__stack+0xfd>
 9fa:	b3 94       	inc	r11
 9fc:	a3 fc       	sbrc	r10, 3
 9fe:	11 c0       	rjmp	.+34     	; 0xa22 <__stack+0x123>
 a00:	a0 fe       	sbrs	r10, 0
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <__stack+0x111>
 a04:	b2 14       	cp	r11, r2
 a06:	88 f4       	brcc	.+34     	; 0xa2a <__stack+0x12b>
 a08:	28 0c       	add	r2, r8
 a0a:	92 2c       	mov	r9, r2
 a0c:	9b 18       	sub	r9, r11
 a0e:	0e c0       	rjmp	.+28     	; 0xa2c <__stack+0x12d>
 a10:	b2 14       	cp	r11, r2
 a12:	60 f4       	brcc	.+24     	; 0xa2c <__stack+0x12d>
 a14:	b6 01       	movw	r22, r12
 a16:	80 e2       	ldi	r24, 0x20	; 32
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 a1e:	b3 94       	inc	r11
 a20:	f7 cf       	rjmp	.-18     	; 0xa10 <__stack+0x111>
 a22:	b2 14       	cp	r11, r2
 a24:	18 f4       	brcc	.+6      	; 0xa2c <__stack+0x12d>
 a26:	2b 18       	sub	r2, r11
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <__stack+0x12f>
 a2a:	98 2c       	mov	r9, r8
 a2c:	21 2c       	mov	r2, r1
 a2e:	a4 fe       	sbrs	r10, 4
 a30:	10 c0       	rjmp	.+32     	; 0xa52 <__stack+0x153>
 a32:	b6 01       	movw	r22, r12
 a34:	80 e3       	ldi	r24, 0x30	; 48
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 a3c:	a2 fe       	sbrs	r10, 2
 a3e:	17 c0       	rjmp	.+46     	; 0xa6e <__stack+0x16f>
 a40:	a1 fc       	sbrc	r10, 1
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <__stack+0x14b>
 a44:	88 e7       	ldi	r24, 0x78	; 120
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <__stack+0x14f>
 a4a:	88 e5       	ldi	r24, 0x58	; 88
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	b6 01       	movw	r22, r12
 a50:	0c c0       	rjmp	.+24     	; 0xa6a <__stack+0x16b>
 a52:	8a 2d       	mov	r24, r10
 a54:	86 78       	andi	r24, 0x86	; 134
 a56:	59 f0       	breq	.+22     	; 0xa6e <__stack+0x16f>
 a58:	a1 fe       	sbrs	r10, 1
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <__stack+0x161>
 a5c:	8b e2       	ldi	r24, 0x2B	; 43
 a5e:	01 c0       	rjmp	.+2      	; 0xa62 <__stack+0x163>
 a60:	80 e2       	ldi	r24, 0x20	; 32
 a62:	a7 fc       	sbrc	r10, 7
 a64:	8d e2       	ldi	r24, 0x2D	; 45
 a66:	b6 01       	movw	r22, r12
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 a6e:	89 14       	cp	r8, r9
 a70:	38 f4       	brcc	.+14     	; 0xa80 <__stack+0x181>
 a72:	b6 01       	movw	r22, r12
 a74:	80 e3       	ldi	r24, 0x30	; 48
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 a7c:	9a 94       	dec	r9
 a7e:	f7 cf       	rjmp	.-18     	; 0xa6e <__stack+0x16f>
 a80:	8a 94       	dec	r8
 a82:	f3 01       	movw	r30, r6
 a84:	e8 0d       	add	r30, r8
 a86:	f1 1d       	adc	r31, r1
 a88:	80 81       	ld	r24, Z
 a8a:	b6 01       	movw	r22, r12
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 a92:	81 10       	cpse	r8, r1
 a94:	f5 cf       	rjmp	.-22     	; 0xa80 <__stack+0x181>
 a96:	22 20       	and	r2, r2
 a98:	09 f4       	brne	.+2      	; 0xa9c <__stack+0x19d>
 a9a:	42 ce       	rjmp	.-892    	; 0x720 <vfprintf+0x24>
 a9c:	b6 01       	movw	r22, r12
 a9e:	80 e2       	ldi	r24, 0x20	; 32
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 aa6:	2a 94       	dec	r2
 aa8:	f6 cf       	rjmp	.-20     	; 0xa96 <__stack+0x197>
 aaa:	f6 01       	movw	r30, r12
 aac:	86 81       	ldd	r24, Z+6	; 0x06
 aae:	97 81       	ldd	r25, Z+7	; 0x07
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__stack+0x1b7>
 ab2:	8f ef       	ldi	r24, 0xFF	; 255
 ab4:	9f ef       	ldi	r25, 0xFF	; 255
 ab6:	2b 96       	adiw	r28, 0x0b	; 11
 ab8:	e2 e1       	ldi	r30, 0x12	; 18
 aba:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__epilogue_restores__>

00000abe <strnlen_P>:
 abe:	fc 01       	movw	r30, r24
 ac0:	05 90       	lpm	r0, Z+
 ac2:	61 50       	subi	r22, 0x01	; 1
 ac4:	70 40       	sbci	r23, 0x00	; 0
 ac6:	01 10       	cpse	r0, r1
 ac8:	d8 f7       	brcc	.-10     	; 0xac0 <strnlen_P+0x2>
 aca:	80 95       	com	r24
 acc:	90 95       	com	r25
 ace:	8e 0f       	add	r24, r30
 ad0:	9f 1f       	adc	r25, r31
 ad2:	08 95       	ret

00000ad4 <strnlen>:
 ad4:	fc 01       	movw	r30, r24
 ad6:	61 50       	subi	r22, 0x01	; 1
 ad8:	70 40       	sbci	r23, 0x00	; 0
 ada:	01 90       	ld	r0, Z+
 adc:	01 10       	cpse	r0, r1
 ade:	d8 f7       	brcc	.-10     	; 0xad6 <strnlen+0x2>
 ae0:	80 95       	com	r24
 ae2:	90 95       	com	r25
 ae4:	8e 0f       	add	r24, r30
 ae6:	9f 1f       	adc	r25, r31
 ae8:	08 95       	ret

00000aea <fputc>:
 aea:	0f 93       	push	r16
 aec:	1f 93       	push	r17
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	fb 01       	movw	r30, r22
 af4:	23 81       	ldd	r18, Z+3	; 0x03
 af6:	21 fd       	sbrc	r18, 1
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <fputc+0x16>
 afa:	8f ef       	ldi	r24, 0xFF	; 255
 afc:	9f ef       	ldi	r25, 0xFF	; 255
 afe:	2c c0       	rjmp	.+88     	; 0xb58 <fputc+0x6e>
 b00:	22 ff       	sbrs	r18, 2
 b02:	16 c0       	rjmp	.+44     	; 0xb30 <fputc+0x46>
 b04:	46 81       	ldd	r20, Z+6	; 0x06
 b06:	57 81       	ldd	r21, Z+7	; 0x07
 b08:	24 81       	ldd	r18, Z+4	; 0x04
 b0a:	35 81       	ldd	r19, Z+5	; 0x05
 b0c:	42 17       	cp	r20, r18
 b0e:	53 07       	cpc	r21, r19
 b10:	44 f4       	brge	.+16     	; 0xb22 <fputc+0x38>
 b12:	a0 81       	ld	r26, Z
 b14:	b1 81       	ldd	r27, Z+1	; 0x01
 b16:	9d 01       	movw	r18, r26
 b18:	2f 5f       	subi	r18, 0xFF	; 255
 b1a:	3f 4f       	sbci	r19, 0xFF	; 255
 b1c:	31 83       	std	Z+1, r19	; 0x01
 b1e:	20 83       	st	Z, r18
 b20:	8c 93       	st	X, r24
 b22:	26 81       	ldd	r18, Z+6	; 0x06
 b24:	37 81       	ldd	r19, Z+7	; 0x07
 b26:	2f 5f       	subi	r18, 0xFF	; 255
 b28:	3f 4f       	sbci	r19, 0xFF	; 255
 b2a:	37 83       	std	Z+7, r19	; 0x07
 b2c:	26 83       	std	Z+6, r18	; 0x06
 b2e:	14 c0       	rjmp	.+40     	; 0xb58 <fputc+0x6e>
 b30:	8b 01       	movw	r16, r22
 b32:	ec 01       	movw	r28, r24
 b34:	fb 01       	movw	r30, r22
 b36:	00 84       	ldd	r0, Z+8	; 0x08
 b38:	f1 85       	ldd	r31, Z+9	; 0x09
 b3a:	e0 2d       	mov	r30, r0
 b3c:	09 95       	icall
 b3e:	89 2b       	or	r24, r25
 b40:	e1 f6       	brne	.-72     	; 0xafa <fputc+0x10>
 b42:	d8 01       	movw	r26, r16
 b44:	16 96       	adiw	r26, 0x06	; 6
 b46:	8d 91       	ld	r24, X+
 b48:	9c 91       	ld	r25, X
 b4a:	17 97       	sbiw	r26, 0x07	; 7
 b4c:	01 96       	adiw	r24, 0x01	; 1
 b4e:	17 96       	adiw	r26, 0x07	; 7
 b50:	9c 93       	st	X, r25
 b52:	8e 93       	st	-X, r24
 b54:	16 97       	sbiw	r26, 0x06	; 6
 b56:	ce 01       	movw	r24, r28
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	1f 91       	pop	r17
 b5e:	0f 91       	pop	r16
 b60:	08 95       	ret

00000b62 <__ultoa_invert>:
 b62:	fa 01       	movw	r30, r20
 b64:	aa 27       	eor	r26, r26
 b66:	28 30       	cpi	r18, 0x08	; 8
 b68:	51 f1       	breq	.+84     	; 0xbbe <__ultoa_invert+0x5c>
 b6a:	20 31       	cpi	r18, 0x10	; 16
 b6c:	81 f1       	breq	.+96     	; 0xbce <__ultoa_invert+0x6c>
 b6e:	e8 94       	clt
 b70:	6f 93       	push	r22
 b72:	6e 7f       	andi	r22, 0xFE	; 254
 b74:	6e 5f       	subi	r22, 0xFE	; 254
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	8f 4f       	sbci	r24, 0xFF	; 255
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	af 4f       	sbci	r26, 0xFF	; 255
 b7e:	b1 e0       	ldi	r27, 0x01	; 1
 b80:	3e d0       	rcall	.+124    	; 0xbfe <__ultoa_invert+0x9c>
 b82:	b4 e0       	ldi	r27, 0x04	; 4
 b84:	3c d0       	rcall	.+120    	; 0xbfe <__ultoa_invert+0x9c>
 b86:	67 0f       	add	r22, r23
 b88:	78 1f       	adc	r23, r24
 b8a:	89 1f       	adc	r24, r25
 b8c:	9a 1f       	adc	r25, r26
 b8e:	a1 1d       	adc	r26, r1
 b90:	68 0f       	add	r22, r24
 b92:	79 1f       	adc	r23, r25
 b94:	8a 1f       	adc	r24, r26
 b96:	91 1d       	adc	r25, r1
 b98:	a1 1d       	adc	r26, r1
 b9a:	6a 0f       	add	r22, r26
 b9c:	71 1d       	adc	r23, r1
 b9e:	81 1d       	adc	r24, r1
 ba0:	91 1d       	adc	r25, r1
 ba2:	a1 1d       	adc	r26, r1
 ba4:	20 d0       	rcall	.+64     	; 0xbe6 <__ultoa_invert+0x84>
 ba6:	09 f4       	brne	.+2      	; 0xbaa <__ultoa_invert+0x48>
 ba8:	68 94       	set
 baa:	3f 91       	pop	r19
 bac:	2a e0       	ldi	r18, 0x0A	; 10
 bae:	26 9f       	mul	r18, r22
 bb0:	11 24       	eor	r1, r1
 bb2:	30 19       	sub	r19, r0
 bb4:	30 5d       	subi	r19, 0xD0	; 208
 bb6:	31 93       	st	Z+, r19
 bb8:	de f6       	brtc	.-74     	; 0xb70 <__ultoa_invert+0xe>
 bba:	cf 01       	movw	r24, r30
 bbc:	08 95       	ret
 bbe:	46 2f       	mov	r20, r22
 bc0:	47 70       	andi	r20, 0x07	; 7
 bc2:	40 5d       	subi	r20, 0xD0	; 208
 bc4:	41 93       	st	Z+, r20
 bc6:	b3 e0       	ldi	r27, 0x03	; 3
 bc8:	0f d0       	rcall	.+30     	; 0xbe8 <__ultoa_invert+0x86>
 bca:	c9 f7       	brne	.-14     	; 0xbbe <__ultoa_invert+0x5c>
 bcc:	f6 cf       	rjmp	.-20     	; 0xbba <__ultoa_invert+0x58>
 bce:	46 2f       	mov	r20, r22
 bd0:	4f 70       	andi	r20, 0x0F	; 15
 bd2:	40 5d       	subi	r20, 0xD0	; 208
 bd4:	4a 33       	cpi	r20, 0x3A	; 58
 bd6:	18 f0       	brcs	.+6      	; 0xbde <__ultoa_invert+0x7c>
 bd8:	49 5d       	subi	r20, 0xD9	; 217
 bda:	31 fd       	sbrc	r19, 1
 bdc:	40 52       	subi	r20, 0x20	; 32
 bde:	41 93       	st	Z+, r20
 be0:	02 d0       	rcall	.+4      	; 0xbe6 <__ultoa_invert+0x84>
 be2:	a9 f7       	brne	.-22     	; 0xbce <__ultoa_invert+0x6c>
 be4:	ea cf       	rjmp	.-44     	; 0xbba <__ultoa_invert+0x58>
 be6:	b4 e0       	ldi	r27, 0x04	; 4
 be8:	a6 95       	lsr	r26
 bea:	97 95       	ror	r25
 bec:	87 95       	ror	r24
 bee:	77 95       	ror	r23
 bf0:	67 95       	ror	r22
 bf2:	ba 95       	dec	r27
 bf4:	c9 f7       	brne	.-14     	; 0xbe8 <__ultoa_invert+0x86>
 bf6:	00 97       	sbiw	r24, 0x00	; 0
 bf8:	61 05       	cpc	r22, r1
 bfa:	71 05       	cpc	r23, r1
 bfc:	08 95       	ret
 bfe:	9b 01       	movw	r18, r22
 c00:	ac 01       	movw	r20, r24
 c02:	0a 2e       	mov	r0, r26
 c04:	06 94       	lsr	r0
 c06:	57 95       	ror	r21
 c08:	47 95       	ror	r20
 c0a:	37 95       	ror	r19
 c0c:	27 95       	ror	r18
 c0e:	ba 95       	dec	r27
 c10:	c9 f7       	brne	.-14     	; 0xc04 <__ultoa_invert+0xa2>
 c12:	62 0f       	add	r22, r18
 c14:	73 1f       	adc	r23, r19
 c16:	84 1f       	adc	r24, r20
 c18:	95 1f       	adc	r25, r21
 c1a:	a0 1d       	adc	r26, r0
 c1c:	08 95       	ret

00000c1e <__prologue_saves__>:
 c1e:	2f 92       	push	r2
 c20:	3f 92       	push	r3
 c22:	4f 92       	push	r4
 c24:	5f 92       	push	r5
 c26:	6f 92       	push	r6
 c28:	7f 92       	push	r7
 c2a:	8f 92       	push	r8
 c2c:	9f 92       	push	r9
 c2e:	af 92       	push	r10
 c30:	bf 92       	push	r11
 c32:	cf 92       	push	r12
 c34:	df 92       	push	r13
 c36:	ef 92       	push	r14
 c38:	ff 92       	push	r15
 c3a:	0f 93       	push	r16
 c3c:	1f 93       	push	r17
 c3e:	cf 93       	push	r28
 c40:	df 93       	push	r29
 c42:	cd b7       	in	r28, 0x3d	; 61
 c44:	de b7       	in	r29, 0x3e	; 62
 c46:	ca 1b       	sub	r28, r26
 c48:	db 0b       	sbc	r29, r27
 c4a:	0f b6       	in	r0, 0x3f	; 63
 c4c:	f8 94       	cli
 c4e:	de bf       	out	0x3e, r29	; 62
 c50:	0f be       	out	0x3f, r0	; 63
 c52:	cd bf       	out	0x3d, r28	; 61
 c54:	09 94       	ijmp

00000c56 <__epilogue_restores__>:
 c56:	2a 88       	ldd	r2, Y+18	; 0x12
 c58:	39 88       	ldd	r3, Y+17	; 0x11
 c5a:	48 88       	ldd	r4, Y+16	; 0x10
 c5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c60:	7d 84       	ldd	r7, Y+13	; 0x0d
 c62:	8c 84       	ldd	r8, Y+12	; 0x0c
 c64:	9b 84       	ldd	r9, Y+11	; 0x0b
 c66:	aa 84       	ldd	r10, Y+10	; 0x0a
 c68:	b9 84       	ldd	r11, Y+9	; 0x09
 c6a:	c8 84       	ldd	r12, Y+8	; 0x08
 c6c:	df 80       	ldd	r13, Y+7	; 0x07
 c6e:	ee 80       	ldd	r14, Y+6	; 0x06
 c70:	fd 80       	ldd	r15, Y+5	; 0x05
 c72:	0c 81       	ldd	r16, Y+4	; 0x04
 c74:	1b 81       	ldd	r17, Y+3	; 0x03
 c76:	aa 81       	ldd	r26, Y+2	; 0x02
 c78:	b9 81       	ldd	r27, Y+1	; 0x01
 c7a:	ce 0f       	add	r28, r30
 c7c:	d1 1d       	adc	r29, r1
 c7e:	0f b6       	in	r0, 0x3f	; 63
 c80:	f8 94       	cli
 c82:	de bf       	out	0x3e, r29	; 62
 c84:	0f be       	out	0x3f, r0	; 63
 c86:	cd bf       	out	0x3d, r28	; 61
 c88:	ed 01       	movw	r28, r26
 c8a:	08 95       	ret

00000c8c <_exit>:
 c8c:	f8 94       	cli

00000c8e <__stop_program>:
 c8e:	ff cf       	rjmp	.-2      	; 0xc8e <__stop_program>
