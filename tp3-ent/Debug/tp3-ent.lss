
tp3-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00000c3e  00000cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008001b4  008001b4  00000d86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001964  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d26  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c25  00000000  00000000  0000366e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00004294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000833  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d8e  00000000  00000000  00004f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_18>
  4c:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 eb       	ldi	r26, 0xB4	; 180
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  9e:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_startSignal_y_respuesta>:

#include "DHT11.h"


void DHT11_startSignal_y_respuesta(){
	DDRC |= (1<<PORTC0);  //Configurar como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<PORTC0);  //Poner en valor bajo
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 ee       	ldi	r24, 0xE0	; 224
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_startSignal_y_respuesta+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_startSignal_y_respuesta+0x1c>
  c2:	00 00       	nop
	_delay_ms(18); // delay de al menos 18ms
	
	
	DDRC &=~(1<<PORTC0);  // Configurar como entrada
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC |=(1<<PORTC0);  // Poner en alto la señal
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	88 b9       	out	0x08, r24	; 8
	
	while(PINC & (1<<PINC0));// Esperar que el sensor ponga en bajo la señal
  d0:	30 99       	sbic	0x06, 0	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <DHT11_startSignal_y_respuesta+0x2a>
	while((PINC & (1<<PINC0))==0);//Esperar que el sensor ponga en alto la señal
  d4:	30 9b       	sbis	0x06, 0	; 6
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <DHT11_startSignal_y_respuesta+0x2e>
}
  d8:	08 95       	ret

000000da <DHT11_bits>:


int DHT11_bits(){
	int cant;
	int i;
	int valor=0;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0; i<8; i++){
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	1a c0       	rjmp	.+52     	; 0x118 <DHT11_bits+0x3e>
		cant=0;  //cantidad de us transcurridos
		while(PINC & (1<<PINC0));  //Esperar que el sensor ponga en bajo la señal
  e4:	30 99       	sbic	0x06, 0	; 6
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <DHT11_bits+0xa>
		while((PINC & (1<<PINC0))==0); //Eperar que el sensor suba la señal 
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <DHT11_bits+0xe>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	06 c0       	rjmp	.+12     	; 0xfe <DHT11_bits+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	6a 95       	dec	r22
  f6:	f1 f7       	brne	.-4      	; 0xf4 <DHT11_bits+0x1a>
  f8:	00 00       	nop
		while(PINC & (1<<PINC0)){  //Mietras la señal este en alto
			_delay_us(1); 
			cant++; 
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
	int valor=0;
	for(i=0; i<8; i++){
		cant=0;  //cantidad de us transcurridos
		while(PINC & (1<<PINC0));  //Esperar que el sensor ponga en bajo la señal
		while((PINC & (1<<PINC0))==0); //Eperar que el sensor suba la señal 
		while(PINC & (1<<PINC0)){  //Mietras la señal este en alto
  fe:	30 99       	sbic	0x06, 0	; 6
 100:	f8 cf       	rjmp	.-16     	; 0xf2 <DHT11_bits+0x18>
			_delay_us(1); 
			cant++; 
		}
		if(cant < 29) //Si pasaron menos de 29us es un "0"
 102:	2d 31       	cpi	r18, 0x1D	; 29
 104:	31 05       	cpc	r19, r1
 106:	1c f4       	brge	.+6      	; 0x10e <DHT11_bits+0x34>
			valor = (valor<<1);
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	03 c0       	rjmp	.+6      	; 0x114 <DHT11_bits+0x3a>
		else //sino es un "1"
			valor = (valor<<1)|(0x01);
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	81 60       	ori	r24, 0x01	; 1

int DHT11_bits(){
	int cant;
	int i;
	int valor=0;
	for(i=0; i<8; i++){
 114:	4f 5f       	subi	r20, 0xFF	; 255
 116:	5f 4f       	sbci	r21, 0xFF	; 255
 118:	48 30       	cpi	r20, 0x08	; 8
 11a:	51 05       	cpc	r21, r1
 11c:	1c f3       	brlt	.-58     	; 0xe4 <DHT11_bits+0xa>
			valor = (valor<<1);
		else //sino es un "1"
			valor = (valor<<1)|(0x01);
	}
	return valor;
}
 11e:	08 95       	ret

00000120 <DHT11_obtenerDatos>:

void DHT11_obtenerDatos(int *temperatura,int *temperatura_decimal, int *humedad, int *humedad_decimal){
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
 132:	eb 01       	movw	r28, r22
 134:	6a 01       	movw	r12, r20
 136:	79 01       	movw	r14, r18
	int sum=0;

	DHT11_startSignal_y_respuesta();
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_startSignal_y_respuesta>
	
	//Empieza la transmision de datos
	
	*humedad=DHT11_bits();
 13c:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 140:	f6 01       	movw	r30, r12
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
	*humedad_decimal=DHT11_bits();
 146:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 14a:	f7 01       	movw	r30, r14
 14c:	91 83       	std	Z+1, r25	; 0x01
 14e:	80 83       	st	Z, r24
	*temperatura=DHT11_bits();
 150:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 154:	f8 01       	movw	r30, r16
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
	*temperatura_decimal=DHT11_bits();
 15a:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
 15e:	99 83       	std	Y+1, r25	; 0x01
 160:	88 83       	st	Y, r24
	sum=DHT11_bits();
 162:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_bits>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	08 95       	ret

00000178 <I2C_Init>:
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
	*day = I2C_Read_Ack();
	*month = I2C_Read_Ack();
	*year = I2C_Read_Ack();
	I2C_Stop();
}
 178:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17c:	87 e4       	ldi	r24, 0x47	; 71
 17e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 188:	08 95       	ret

0000018a <I2C_Start>:
 18a:	84 ea       	ldi	r24, 0xA4	; 164
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 190:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 194:	88 23       	and	r24, r24
 196:	e4 f7       	brge	.-8      	; 0x190 <I2C_Start+0x6>
 198:	08 95       	ret

0000019a <I2C_Stop>:
 19a:	84 e9       	ldi	r24, 0x94	; 148
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	08 95       	ret

000001a2 <I2C_Write>:
 1a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b0:	88 23       	and	r24, r24
 1b2:	e4 f7       	brge	.-8      	; 0x1ac <I2C_Write+0xa>
 1b4:	08 95       	ret

000001b6 <I2C_Read_Ack>:
 1b6:	84 ec       	ldi	r24, 0xC4	; 196
 1b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	88 23       	and	r24, r24
 1c2:	e4 f7       	brge	.-8      	; 0x1bc <I2C_Read_Ack+0x6>
 1c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1c8:	08 95       	ret

000001ca <I2C_Read_NAck>:
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	88 23       	and	r24, r24
 1d6:	e4 f7       	brge	.-8      	; 0x1d0 <I2C_Read_NAck+0x6>
 1d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1dc:	08 95       	ret

000001de <DecToBcd>:
 1de:	9d ec       	ldi	r25, 0xCD	; 205
 1e0:	89 9f       	mul	r24, r25
 1e2:	91 2d       	mov	r25, r1
 1e4:	11 24       	eor	r1, r1
 1e6:	96 95       	lsr	r25
 1e8:	96 95       	lsr	r25
 1ea:	96 95       	lsr	r25
 1ec:	39 2f       	mov	r19, r25
 1ee:	33 0f       	add	r19, r19
 1f0:	23 2f       	mov	r18, r19
 1f2:	22 0f       	add	r18, r18
 1f4:	22 0f       	add	r18, r18
 1f6:	23 0f       	add	r18, r19
 1f8:	82 1b       	sub	r24, r18
 1fa:	20 e1       	ldi	r18, 0x10	; 16
 1fc:	92 9f       	mul	r25, r18
 1fe:	80 0d       	add	r24, r0
 200:	11 24       	eor	r1, r1
 202:	08 95       	ret

00000204 <BcdToDec>:
 204:	98 2f       	mov	r25, r24
 206:	92 95       	swap	r25
 208:	9f 70       	andi	r25, 0x0F	; 15
 20a:	99 0f       	add	r25, r25
 20c:	29 2f       	mov	r18, r25
 20e:	22 0f       	add	r18, r18
 210:	22 0f       	add	r18, r18
 212:	92 0f       	add	r25, r18
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	89 0f       	add	r24, r25
 218:	08 95       	ret

0000021a <DS3231_GetClock>:

void DS3231_GetClock(uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year){
 21a:	6f 92       	push	r6
 21c:	7f 92       	push	r7
 21e:	8f 92       	push	r8
 220:	9f 92       	push	r9
 222:	af 92       	push	r10
 224:	bf 92       	push	r11
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	5b 01       	movw	r10, r22
 23a:	4a 01       	movw	r8, r20
 23c:	39 01       	movw	r6, r18
	I2C_Start();
 23e:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 242:	80 ed       	ldi	r24, 0xD0	; 208
 244:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(0x00);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Start();
 24e:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 252:	81 ed       	ldi	r24, 0xD1	; 209
 254:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	*second = BcdToDec(I2C_Read_Ack());
 258:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 25c:	0e 94 02 01 	call	0x204	; 0x204 <BcdToDec>
 260:	f4 01       	movw	r30, r8
 262:	80 83       	st	Z, r24
	*minute = BcdToDec(I2C_Read_Ack());
 264:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 268:	0e 94 02 01 	call	0x204	; 0x204 <BcdToDec>
 26c:	f5 01       	movw	r30, r10
 26e:	80 83       	st	Z, r24
	*hour = BcdToDec(I2C_Read_Ack());
 270:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 274:	0e 94 02 01 	call	0x204	; 0x204 <BcdToDec>
 278:	88 83       	st	Y, r24
	*day = BcdToDec(I2C_Read_Ack());
 27a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 27e:	0e 94 02 01 	call	0x204	; 0x204 <BcdToDec>
 282:	f3 01       	movw	r30, r6
 284:	80 83       	st	Z, r24
	*date = BcdToDec(I2C_Read_Ack());
 286:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 28a:	0e 94 02 01 	call	0x204	; 0x204 <BcdToDec>
 28e:	f8 01       	movw	r30, r16
 290:	80 83       	st	Z, r24
	*month = BcdToDec(I2C_Read_Ack());
 292:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 296:	0e 94 02 01 	call	0x204	; 0x204 <BcdToDec>
 29a:	f7 01       	movw	r30, r14
 29c:	80 83       	st	Z, r24
	*year = BcdToDec(I2C_Read_NAck());
 29e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <I2C_Read_NAck>
 2a2:	0e 94 02 01 	call	0x204	; 0x204 <BcdToDec>
 2a6:	f6 01       	movw	r30, r12
 2a8:	80 83       	st	Z, r24
	I2C_Stop();
 2aa:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Stop>
	
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	7f 90       	pop	r7
 2c8:	6f 90       	pop	r6
 2ca:	08 95       	ret

000002cc <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t hour, uint8_t minute, uint8_t second, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
 2cc:	cf 92       	push	r12
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	d8 2f       	mov	r29, r24
 2dc:	16 2f       	mov	r17, r22
 2de:	f4 2e       	mov	r15, r20
 2e0:	c2 2f       	mov	r28, r18
	I2C_Start();
 2e2:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 2e6:	80 ed       	ldi	r24, 0xD0	; 208
 2e8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(0x00); // Start from register 0x00
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(DecToBcd(second));
 2f2:	8f 2d       	mov	r24, r15
 2f4:	0e 94 ef 00 	call	0x1de	; 0x1de <DecToBcd>
 2f8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(DecToBcd(minute));
 2fc:	81 2f       	mov	r24, r17
 2fe:	0e 94 ef 00 	call	0x1de	; 0x1de <DecToBcd>
 302:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(DecToBcd(hour));
 306:	8d 2f       	mov	r24, r29
 308:	0e 94 ef 00 	call	0x1de	; 0x1de <DecToBcd>
 30c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(DecToBcd(day)); // Weekday register (not used)
 310:	8c 2f       	mov	r24, r28
 312:	0e 94 ef 00 	call	0x1de	; 0x1de <DecToBcd>
 316:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(DecToBcd(date)); // Weekday register (not used)
 31a:	80 2f       	mov	r24, r16
 31c:	0e 94 ef 00 	call	0x1de	; 0x1de <DecToBcd>
 320:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(DecToBcd(month));
 324:	8e 2d       	mov	r24, r14
 326:	0e 94 ef 00 	call	0x1de	; 0x1de <DecToBcd>
 32a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Write(DecToBcd(year));
 32e:	8c 2d       	mov	r24, r12
 330:	0e 94 ef 00 	call	0x1de	; 0x1de <DecToBcd>
 334:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_Write>
	I2C_Stop();
 338:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Stop>
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	cf 90       	pop	r12
 34a:	08 95       	ret

0000034c <main>:
static char novalido[] = "Comando no valido\n\r";
volatile int comando_anterior;

int main(void){

	UART_init();   // Inicializar UART
 34c:	0e 94 b1 02 	call	0x562	; 0x562 <UART_init>
	sei();         // Activar máscara de interrupciones
 350:	78 94       	sei
	
	UART_sendString(bienvenida); // Enviar mensaje de inicio/bienvenida
 352:	84 e1       	ldi	r24, 0x14	; 20
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 bb 02 	call	0x576	; 0x576 <UART_sendString>
	// Set the desired time: hours, minutes, seconds
	//DS3231_SetTime(14, 30, 0); // 14:30:00 (2:30 PM)

	// Set the desired date: day, date, month, year
	//DS3231_SetDate(1, 9, 6, 24); // Monday, 09 June 2024 (1 for Monday, 0 for Sunday)
	I2C_Init();
 35a:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Init>
	DS3231_SetDateTime(14, 30, 45, 4, 12, 6, 24); // Establece la hora a 14:30:45 y la fecha a 12/06/2024
 35e:	0f 2e       	mov	r0, r31
 360:	f8 e1       	ldi	r31, 0x18	; 24
 362:	cf 2e       	mov	r12, r31
 364:	f0 2d       	mov	r31, r0
 366:	0f 2e       	mov	r0, r31
 368:	f6 e0       	ldi	r31, 0x06	; 6
 36a:	ef 2e       	mov	r14, r31
 36c:	f0 2d       	mov	r31, r0
 36e:	0c e0       	ldi	r16, 0x0C	; 12
 370:	24 e0       	ldi	r18, 0x04	; 4
 372:	4d e2       	ldi	r20, 0x2D	; 45
 374:	6e e1       	ldi	r22, 0x1E	; 30
 376:	8e e0       	ldi	r24, 0x0E	; 14
 378:	0e 94 66 01 	call	0x2cc	; 0x2cc <DS3231_SetDateTime>
	while (1){
		if (UART_hayComando()) {
 37c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_hayComando>
 380:	88 23       	and	r24, r24
 382:	c1 f0       	breq	.+48     	; 0x3b4 <main+0x68>
			char comando = UART_getComando();
 384:	0e 94 dd 02 	call	0x5ba	; 0x5ba <UART_getComando>
			if (comando == 's') {
 388:	83 37       	cpi	r24, 0x73	; 115
 38a:	39 f4       	brne	.+14     	; 0x39a <main+0x4e>
				transmision_activa = 1; // Reanudar transmisión
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <transmision_activa+0x1>
 394:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <transmision_activa>
 398:	0b c0       	rjmp	.+22     	; 0x3b0 <main+0x64>
				} else if (comando == 'S') {
 39a:	83 35       	cpi	r24, 0x53	; 83
 39c:	29 f4       	brne	.+10     	; 0x3a8 <main+0x5c>
				transmision_activa = 0; // Detener transmisión
 39e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <transmision_activa+0x1>
 3a2:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <transmision_activa>
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <main+0x64>
				} else {
				UART_sendString(novalido); // Enviar mensaje de comando no válido
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 bb 02 	call	0x576	; 0x576 <UART_sendString>
			}
			UART_setHayComando(); // Avisar que el comando ya fue procesado
 3b0:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_setHayComando>
		}

		if (transmision_activa) {
 3b4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <transmision_activa>
 3b8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <transmision_activa+0x1>
 3bc:	89 2b       	or	r24, r25
 3be:	f1 f2       	breq	.-68     	; 0x37c <main+0x30>
			Terminal_sendDatos();  // Obtener y enviar datos del sensor
 3c0:	0e 94 17 02 	call	0x42e	; 0x42e <Terminal_sendDatos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	87 ea       	ldi	r24, 0xA7	; 167
 3c8:	91 e6       	ldi	r25, 0x61	; 97
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x7e>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x88>
 3d4:	00 00       	nop
 3d6:	d2 cf       	rjmp	.-92     	; 0x37c <main+0x30>

000003d8 <SerialPort_Init>:
 3d8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3dc:	96 e0       	ldi	r25, 0x06	; 6
 3de:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3ea:	08 95       	ret

000003ec <SerialPort_TX_Enable>:
 3ec:	e1 ec       	ldi	r30, 0xC1	; 193
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	88 60       	ori	r24, 0x08	; 8
 3f4:	80 83       	st	Z, r24
 3f6:	08 95       	ret

000003f8 <SerialPort_TX_Interrupt_Enable>:
 3f8:	e1 ec       	ldi	r30, 0xC1	; 193
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	80 62       	ori	r24, 0x20	; 32
 400:	80 83       	st	Z, r24
 402:	08 95       	ret

00000404 <SerialPort_TX_Interrupt_Disable>:
 404:	e1 ec       	ldi	r30, 0xC1	; 193
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	8f 7d       	andi	r24, 0xDF	; 223
 40c:	80 83       	st	Z, r24
 40e:	08 95       	ret

00000410 <SerialPort_RX_Enable>:
 410:	e1 ec       	ldi	r30, 0xC1	; 193
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	80 61       	ori	r24, 0x10	; 16
 418:	80 83       	st	Z, r24
 41a:	08 95       	ret

0000041c <SerialPort_RX_Interrupt_Enable>:
 41c:	e1 ec       	ldi	r30, 0xC1	; 193
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	80 68       	ori	r24, 0x80	; 128
 424:	80 83       	st	Z, r24
 426:	08 95       	ret

00000428 <SerialPort_Send_Data>:
 428:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 42c:	08 95       	ret

0000042e <Terminal_sendDatos>:
		return 2;// Comando no válido
	}
}


void Terminal_sendDatos(){
 42e:	cf 92       	push	r12
 430:	df 92       	push	r13
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	c3 57       	subi	r28, 0x73	; 115
 444:	d1 09       	sbc	r29, r1
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
	char temperaturayhumedad[50]; // Ampliamos el tamaño del buffer para dar espacio a la fecha y hora
	char dataBuffer[100];
	int humedad, humedad_decimal, temperatura_decimal, temperatura;
	uint8_t hours, minutes, seconds;
	uint8_t day, date, month, year;
	DHT11_obtenerDatos(&temperatura, &temperatura_decimal, &humedad, &humedad_decimal);
 450:	9e 01       	movw	r18, r28
 452:	29 59       	subi	r18, 0x99	; 153
 454:	3f 4f       	sbci	r19, 0xFF	; 255
 456:	ae 01       	movw	r20, r28
 458:	4b 59       	subi	r20, 0x9B	; 155
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	be 01       	movw	r22, r28
 45e:	67 59       	subi	r22, 0x97	; 151
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	ce 01       	movw	r24, r28
 464:	85 59       	subi	r24, 0x95	; 149
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	0e 94 90 00 	call	0x120	; 0x120 <DHT11_obtenerDatos>
	// Obtain date from DS3231
	//DS3231_GetDate(&day, &date, &month, &year);
	//DS3231_GetDate(&date, &month, &year);
	// Obtener datos del sensor y formatearlos
	
	DS3231_GetClock(&hours, &minutes, &seconds, &day, &date, &month, &year);
 46c:	ce 01       	movw	r24, r28
 46e:	8d 58       	subi	r24, 0x8D	; 141
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	6c 01       	movw	r12, r24
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	7c 01       	movw	r14, r24
 478:	8e 01       	movw	r16, r28
 47a:	0f 58       	subi	r16, 0x8F	; 143
 47c:	1f 4f       	sbci	r17, 0xFF	; 255
 47e:	9e 01       	movw	r18, r28
 480:	20 59       	subi	r18, 0x90	; 144
 482:	3f 4f       	sbci	r19, 0xFF	; 255
 484:	ae 01       	movw	r20, r28
 486:	41 59       	subi	r20, 0x91	; 145
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	be 01       	movw	r22, r28
 48c:	62 59       	subi	r22, 0x92	; 146
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	05 97       	sbiw	r24, 0x05	; 5
 492:	0e 94 0d 01 	call	0x21a	; 0x21a <DS3231_GetClock>
	
	if (humedad > 100)
 496:	a7 96       	adiw	r28, 0x27	; 39
 498:	8e ad       	ldd	r24, Y+62	; 0x3e
 49a:	9f ad       	ldd	r25, Y+63	; 0x3f
 49c:	a7 97       	sbiw	r28, 0x27	; 39
 49e:	85 36       	cpi	r24, 0x65	; 101
 4a0:	91 05       	cpc	r25, r1
 4a2:	34 f0       	brlt	.+12     	; 0x4b0 <Terminal_sendDatos+0x82>
	{
		humedad = humedad - 100;
 4a4:	84 56       	subi	r24, 0x64	; 100
 4a6:	91 09       	sbc	r25, r1
 4a8:	a7 96       	adiw	r28, 0x27	; 39
 4aa:	9f af       	std	Y+63, r25	; 0x3f
 4ac:	8e af       	std	Y+62, r24	; 0x3e
 4ae:	a7 97       	sbiw	r28, 0x27	; 39
	}
	
	sprintf(dataBuffer, "TEMP: %d.%d °C HUM: %02d%% FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n",
 4b0:	e0 96       	adiw	r28, 0x30	; 48
 4b2:	8f ad       	ldd	r24, Y+63	; 0x3f
 4b4:	e0 97       	sbiw	r28, 0x30	; 48
 4b6:	1f 92       	push	r1
 4b8:	8f 93       	push	r24
 4ba:	af 96       	adiw	r28, 0x2f	; 47
 4bc:	8f ad       	ldd	r24, Y+63	; 0x3f
 4be:	af 97       	sbiw	r28, 0x2f	; 47
 4c0:	1f 92       	push	r1
 4c2:	8f 93       	push	r24
 4c4:	ae 96       	adiw	r28, 0x2e	; 46
 4c6:	8f ad       	ldd	r24, Y+63	; 0x3f
 4c8:	ae 97       	sbiw	r28, 0x2e	; 46
 4ca:	1f 92       	push	r1
 4cc:	8f 93       	push	r24
 4ce:	e4 96       	adiw	r28, 0x34	; 52
 4d0:	8f ad       	ldd	r24, Y+63	; 0x3f
 4d2:	e4 97       	sbiw	r28, 0x34	; 52
 4d4:	1f 92       	push	r1
 4d6:	8f 93       	push	r24
 4d8:	e3 96       	adiw	r28, 0x33	; 51
 4da:	8f ad       	ldd	r24, Y+63	; 0x3f
 4dc:	e3 97       	sbiw	r28, 0x33	; 51
 4de:	1f 92       	push	r1
 4e0:	8f 93       	push	r24
 4e2:	e2 96       	adiw	r28, 0x32	; 50
 4e4:	8f ad       	ldd	r24, Y+63	; 0x3f
 4e6:	e2 97       	sbiw	r28, 0x32	; 50
 4e8:	1f 92       	push	r1
 4ea:	8f 93       	push	r24
 4ec:	a7 96       	adiw	r28, 0x27	; 39
 4ee:	8f ad       	ldd	r24, Y+63	; 0x3f
 4f0:	a7 97       	sbiw	r28, 0x27	; 39
 4f2:	8f 93       	push	r24
 4f4:	a6 96       	adiw	r28, 0x26	; 38
 4f6:	8f ad       	ldd	r24, Y+63	; 0x3f
 4f8:	a6 97       	sbiw	r28, 0x26	; 38
 4fa:	8f 93       	push	r24
 4fc:	ab 96       	adiw	r28, 0x2b	; 43
 4fe:	8f ad       	ldd	r24, Y+63	; 0x3f
 500:	ab 97       	sbiw	r28, 0x2b	; 43
 502:	8f 93       	push	r24
 504:	aa 96       	adiw	r28, 0x2a	; 42
 506:	8f ad       	ldd	r24, Y+63	; 0x3f
 508:	aa 97       	sbiw	r28, 0x2a	; 42
 50a:	8f 93       	push	r24
 50c:	ad 96       	adiw	r28, 0x2d	; 45
 50e:	8f ad       	ldd	r24, Y+63	; 0x3f
 510:	ad 97       	sbiw	r28, 0x2d	; 45
 512:	8f 93       	push	r24
 514:	ac 96       	adiw	r28, 0x2c	; 44
 516:	8f ad       	ldd	r24, Y+63	; 0x3f
 518:	ac 97       	sbiw	r28, 0x2c	; 44
 51a:	8f 93       	push	r24
 51c:	8b e6       	ldi	r24, 0x6B	; 107
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	9f 93       	push	r25
 522:	8f 93       	push	r24
 524:	8e 01       	movw	r16, r28
 526:	0f 5f       	subi	r16, 0xFF	; 255
 528:	1f 4f       	sbci	r17, 0xFF	; 255
 52a:	1f 93       	push	r17
 52c:	0f 93       	push	r16
 52e:	0e 94 33 03 	call	0x666	; 0x666 <sprintf>
	temperatura, temperatura_decimal, humedad, date, month, year, hours, minutes, seconds);


	// Send the formatted string over UART
	UART_sendString(dataBuffer);
 532:	c8 01       	movw	r24, r16
 534:	0e 94 bb 02 	call	0x576	; 0x576 <UART_sendString>
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	cd 58       	subi	r28, 0x8D	; 141
 544:	df 4f       	sbci	r29, 0xFF	; 255
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	08 95       	ret

00000562 <UART_init>:
volatile unsigned char nuevoDato = 0;

static int nuevoComando = 0;

void UART_init(){
	SerialPort_Init(0x67); // inicializar puerto serie
 562:	87 e6       	ldi	r24, 0x67	; 103
 564:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SerialPort_Init>
	SerialPort_TX_Enable(); // habilitar transmisor TX
 568:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SerialPort_TX_Enable>
	SerialPort_RX_Enable(); // habilitar receptor RX
 56c:	0e 94 08 02 	call	0x410	; 0x410 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepción
 570:	0e 94 0e 02 	call	0x41c	; 0x41c <SerialPort_RX_Interrupt_Enable>
 574:	08 95       	ret

00000576 <UART_sendString>:
}

void UART_sendString(char* s){
 576:	ac 01       	movw	r20, r24
	unsigned char indice = 0;
 578:	20 e0       	ldi	r18, 0x00	; 0
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 57a:	0d c0       	rjmp	.+26     	; 0x596 <UART_sendString+0x20>
		if(TX_indiceescritura < 105){ // si el índice es menor al tamaño máximo del buffer
 57c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <TX_indiceescritura>
 580:	99 36       	cpi	r25, 0x69	; 105
 582:	40 f4       	brcc	.+16     	; 0x594 <UART_sendString+0x1e>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar carácter en buffer
 584:	e9 2f       	mov	r30, r25
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	e9 54       	subi	r30, 0x49	; 73
 58a:	fe 4f       	sbci	r31, 0xFE	; 254
 58c:	30 83       	st	Z, r19
			TX_indiceescritura++;
 58e:	9f 5f       	subi	r25, 0xFF	; 255
 590:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <TX_indiceescritura>
		}
		indice++;
 594:	2f 5f       	subi	r18, 0xFF	; 255
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepción
}

void UART_sendString(char* s){
	unsigned char indice = 0;
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 596:	fa 01       	movw	r30, r20
 598:	e2 0f       	add	r30, r18
 59a:	f1 1d       	adc	r31, r1
 59c:	30 81       	ld	r19, Z
 59e:	31 11       	cpse	r19, r1
 5a0:	ed cf       	rjmp	.-38     	; 0x57c <UART_sendString+0x6>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar carácter en buffer
			TX_indiceescritura++;
		}
		indice++;
	}
	hayString = 1; // Activo flag
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <hayString>
	SerialPort_TX_Interrupt_Enable(); // Activo interrupción de transmisión
 5a8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SerialPort_TX_Interrupt_Enable>
 5ac:	08 95       	ret

000005ae <UART_hayComando>:
}

char UART_hayComando(){
	return nuevoDato; // Retorna si hay un nuevo dato recibido
 5ae:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
}
 5b2:	08 95       	ret

000005b4 <UART_setHayComando>:

void UART_setHayComando(){
	nuevoDato = 0; // Resetear bandera de nuevo dato
 5b4:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
 5b8:	08 95       	ret

000005ba <UART_getComando>:
}

char UART_getComando(){
	return RX_Buffer; // Retorna el carácter recibido
 5ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <RX_Buffer>
}
 5be:	08 95       	ret

000005c0 <__vector_18>:

ISR(USART_RX_vect){
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	8f 93       	push	r24
	RX_Buffer = UDR0; // Leer el dato recibido
 5cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5d0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <RX_Buffer>
	nuevoDato = 1; // Indicar que hay un nuevo dato
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
}
 5da:	8f 91       	pop	r24
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <__vector_19>:

ISR(USART_UDRE_vect){
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	if(hayString){ // Si hay cadena para transmitir
 608:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <hayString>
 60c:	88 23       	and	r24, r24
 60e:	d1 f0       	breq	.+52     	; 0x644 <__vector_19+0x5e>
		if (TX_indicelectura < TX_indiceescritura){ // Si sigue habiendo datos
 610:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <TX_indicelectura>
 614:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <TX_indiceescritura>
 618:	e8 17       	cp	r30, r24
 61a:	60 f4       	brcc	.+24     	; 0x634 <__vector_19+0x4e>
			SerialPort_Send_Data(TX_Buffer[TX_indicelectura]); // Enviar dato
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	e9 54       	subi	r30, 0x49	; 73
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	80 81       	ld	r24, Z
 624:	0e 94 14 02 	call	0x428	; 0x428 <SerialPort_Send_Data>
			TX_indicelectura++;
 628:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <TX_indicelectura>
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <TX_indicelectura>
 632:	08 c0       	rjmp	.+16     	; 0x644 <__vector_19+0x5e>
		}
		else {
			hayString = 0; // Termino de transmitir
 634:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <hayString>
			TX_indicelectura = 0;
 638:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <TX_indicelectura>
			TX_indiceescritura = 0;
 63c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <TX_indiceescritura>
			SerialPort_TX_Interrupt_Disable(); // Deshabilitar interrupción de transmisión
 640:	0e 94 02 02 	call	0x404	; 0x404 <SerialPort_TX_Interrupt_Disable>
		}
	}
}
 644:	ff 91       	pop	r31
 646:	ef 91       	pop	r30
 648:	bf 91       	pop	r27
 64a:	af 91       	pop	r26
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	7f 91       	pop	r23
 652:	6f 91       	pop	r22
 654:	5f 91       	pop	r21
 656:	4f 91       	pop	r20
 658:	3f 91       	pop	r19
 65a:	2f 91       	pop	r18
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <sprintf>:
 666:	ae e0       	ldi	r26, 0x0E	; 14
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e9 e3       	ldi	r30, 0x39	; 57
 66c:	f3 e0       	ldi	r31, 0x03	; 3
 66e:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__prologue_saves__+0x1c>
 672:	0d 89       	ldd	r16, Y+21	; 0x15
 674:	1e 89       	ldd	r17, Y+22	; 0x16
 676:	86 e0       	ldi	r24, 0x06	; 6
 678:	8c 83       	std	Y+4, r24	; 0x04
 67a:	1a 83       	std	Y+2, r17	; 0x02
 67c:	09 83       	std	Y+1, r16	; 0x01
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	9f e7       	ldi	r25, 0x7F	; 127
 682:	9e 83       	std	Y+6, r25	; 0x06
 684:	8d 83       	std	Y+5, r24	; 0x05
 686:	ae 01       	movw	r20, r28
 688:	47 5e       	subi	r20, 0xE7	; 231
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	6f 89       	ldd	r22, Y+23	; 0x17
 68e:	78 8d       	ldd	r23, Y+24	; 0x18
 690:	ce 01       	movw	r24, r28
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	0e 94 55 03 	call	0x6aa	; 0x6aa <vfprintf>
 698:	ef 81       	ldd	r30, Y+7	; 0x07
 69a:	f8 85       	ldd	r31, Y+8	; 0x08
 69c:	e0 0f       	add	r30, r16
 69e:	f1 1f       	adc	r31, r17
 6a0:	10 82       	st	Z, r1
 6a2:	2e 96       	adiw	r28, 0x0e	; 14
 6a4:	e4 e0       	ldi	r30, 0x04	; 4
 6a6:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__epilogue_restores__+0x1c>

000006aa <vfprintf>:
 6aa:	ab e0       	ldi	r26, 0x0B	; 11
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	eb e5       	ldi	r30, 0x5B	; 91
 6b0:	f3 e0       	ldi	r31, 0x03	; 3
 6b2:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__prologue_saves__>
 6b6:	6c 01       	movw	r12, r24
 6b8:	7b 01       	movw	r14, r22
 6ba:	8a 01       	movw	r16, r20
 6bc:	fc 01       	movw	r30, r24
 6be:	17 82       	std	Z+7, r1	; 0x07
 6c0:	16 82       	std	Z+6, r1	; 0x06
 6c2:	83 81       	ldd	r24, Z+3	; 0x03
 6c4:	81 ff       	sbrs	r24, 1
 6c6:	cc c1       	rjmp	.+920    	; 0xa60 <__stack+0x161>
 6c8:	ce 01       	movw	r24, r28
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	3c 01       	movw	r6, r24
 6ce:	f6 01       	movw	r30, r12
 6d0:	93 81       	ldd	r25, Z+3	; 0x03
 6d2:	f7 01       	movw	r30, r14
 6d4:	93 fd       	sbrc	r25, 3
 6d6:	85 91       	lpm	r24, Z+
 6d8:	93 ff       	sbrs	r25, 3
 6da:	81 91       	ld	r24, Z+
 6dc:	7f 01       	movw	r14, r30
 6de:	88 23       	and	r24, r24
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <vfprintf+0x3a>
 6e2:	ba c1       	rjmp	.+884    	; 0xa58 <__stack+0x159>
 6e4:	85 32       	cpi	r24, 0x25	; 37
 6e6:	39 f4       	brne	.+14     	; 0x6f6 <vfprintf+0x4c>
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	7f 01       	movw	r14, r30
 6f2:	85 32       	cpi	r24, 0x25	; 37
 6f4:	29 f4       	brne	.+10     	; 0x700 <vfprintf+0x56>
 6f6:	b6 01       	movw	r22, r12
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 6fe:	e7 cf       	rjmp	.-50     	; 0x6ce <vfprintf+0x24>
 700:	91 2c       	mov	r9, r1
 702:	21 2c       	mov	r2, r1
 704:	31 2c       	mov	r3, r1
 706:	ff e1       	ldi	r31, 0x1F	; 31
 708:	f3 15       	cp	r31, r3
 70a:	d8 f0       	brcs	.+54     	; 0x742 <vfprintf+0x98>
 70c:	8b 32       	cpi	r24, 0x2B	; 43
 70e:	79 f0       	breq	.+30     	; 0x72e <vfprintf+0x84>
 710:	38 f4       	brcc	.+14     	; 0x720 <vfprintf+0x76>
 712:	80 32       	cpi	r24, 0x20	; 32
 714:	79 f0       	breq	.+30     	; 0x734 <vfprintf+0x8a>
 716:	83 32       	cpi	r24, 0x23	; 35
 718:	a1 f4       	brne	.+40     	; 0x742 <vfprintf+0x98>
 71a:	23 2d       	mov	r18, r3
 71c:	20 61       	ori	r18, 0x10	; 16
 71e:	1d c0       	rjmp	.+58     	; 0x75a <vfprintf+0xb0>
 720:	8d 32       	cpi	r24, 0x2D	; 45
 722:	61 f0       	breq	.+24     	; 0x73c <vfprintf+0x92>
 724:	80 33       	cpi	r24, 0x30	; 48
 726:	69 f4       	brne	.+26     	; 0x742 <vfprintf+0x98>
 728:	23 2d       	mov	r18, r3
 72a:	21 60       	ori	r18, 0x01	; 1
 72c:	16 c0       	rjmp	.+44     	; 0x75a <vfprintf+0xb0>
 72e:	83 2d       	mov	r24, r3
 730:	82 60       	ori	r24, 0x02	; 2
 732:	38 2e       	mov	r3, r24
 734:	e3 2d       	mov	r30, r3
 736:	e4 60       	ori	r30, 0x04	; 4
 738:	3e 2e       	mov	r3, r30
 73a:	2a c0       	rjmp	.+84     	; 0x790 <vfprintf+0xe6>
 73c:	f3 2d       	mov	r31, r3
 73e:	f8 60       	ori	r31, 0x08	; 8
 740:	1d c0       	rjmp	.+58     	; 0x77c <vfprintf+0xd2>
 742:	37 fc       	sbrc	r3, 7
 744:	2d c0       	rjmp	.+90     	; 0x7a0 <vfprintf+0xf6>
 746:	20 ed       	ldi	r18, 0xD0	; 208
 748:	28 0f       	add	r18, r24
 74a:	2a 30       	cpi	r18, 0x0A	; 10
 74c:	40 f0       	brcs	.+16     	; 0x75e <vfprintf+0xb4>
 74e:	8e 32       	cpi	r24, 0x2E	; 46
 750:	b9 f4       	brne	.+46     	; 0x780 <vfprintf+0xd6>
 752:	36 fc       	sbrc	r3, 6
 754:	81 c1       	rjmp	.+770    	; 0xa58 <__stack+0x159>
 756:	23 2d       	mov	r18, r3
 758:	20 64       	ori	r18, 0x40	; 64
 75a:	32 2e       	mov	r3, r18
 75c:	19 c0       	rjmp	.+50     	; 0x790 <vfprintf+0xe6>
 75e:	36 fe       	sbrs	r3, 6
 760:	06 c0       	rjmp	.+12     	; 0x76e <vfprintf+0xc4>
 762:	8a e0       	ldi	r24, 0x0A	; 10
 764:	98 9e       	mul	r9, r24
 766:	20 0d       	add	r18, r0
 768:	11 24       	eor	r1, r1
 76a:	92 2e       	mov	r9, r18
 76c:	11 c0       	rjmp	.+34     	; 0x790 <vfprintf+0xe6>
 76e:	ea e0       	ldi	r30, 0x0A	; 10
 770:	2e 9e       	mul	r2, r30
 772:	20 0d       	add	r18, r0
 774:	11 24       	eor	r1, r1
 776:	22 2e       	mov	r2, r18
 778:	f3 2d       	mov	r31, r3
 77a:	f0 62       	ori	r31, 0x20	; 32
 77c:	3f 2e       	mov	r3, r31
 77e:	08 c0       	rjmp	.+16     	; 0x790 <vfprintf+0xe6>
 780:	8c 36       	cpi	r24, 0x6C	; 108
 782:	21 f4       	brne	.+8      	; 0x78c <vfprintf+0xe2>
 784:	83 2d       	mov	r24, r3
 786:	80 68       	ori	r24, 0x80	; 128
 788:	38 2e       	mov	r3, r24
 78a:	02 c0       	rjmp	.+4      	; 0x790 <vfprintf+0xe6>
 78c:	88 36       	cpi	r24, 0x68	; 104
 78e:	41 f4       	brne	.+16     	; 0x7a0 <vfprintf+0xf6>
 790:	f7 01       	movw	r30, r14
 792:	93 fd       	sbrc	r25, 3
 794:	85 91       	lpm	r24, Z+
 796:	93 ff       	sbrs	r25, 3
 798:	81 91       	ld	r24, Z+
 79a:	7f 01       	movw	r14, r30
 79c:	81 11       	cpse	r24, r1
 79e:	b3 cf       	rjmp	.-154    	; 0x706 <vfprintf+0x5c>
 7a0:	98 2f       	mov	r25, r24
 7a2:	9f 7d       	andi	r25, 0xDF	; 223
 7a4:	95 54       	subi	r25, 0x45	; 69
 7a6:	93 30       	cpi	r25, 0x03	; 3
 7a8:	28 f4       	brcc	.+10     	; 0x7b4 <vfprintf+0x10a>
 7aa:	0c 5f       	subi	r16, 0xFC	; 252
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	9f e3       	ldi	r25, 0x3F	; 63
 7b0:	99 83       	std	Y+1, r25	; 0x01
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <vfprintf+0x124>
 7b4:	83 36       	cpi	r24, 0x63	; 99
 7b6:	31 f0       	breq	.+12     	; 0x7c4 <vfprintf+0x11a>
 7b8:	83 37       	cpi	r24, 0x73	; 115
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <vfprintf+0x12e>
 7bc:	83 35       	cpi	r24, 0x53	; 83
 7be:	09 f0       	breq	.+2      	; 0x7c2 <vfprintf+0x118>
 7c0:	59 c0       	rjmp	.+178    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 7c2:	21 c0       	rjmp	.+66     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7c4:	f8 01       	movw	r30, r16
 7c6:	80 81       	ld	r24, Z
 7c8:	89 83       	std	Y+1, r24	; 0x01
 7ca:	0e 5f       	subi	r16, 0xFE	; 254
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	88 24       	eor	r8, r8
 7d0:	83 94       	inc	r8
 7d2:	91 2c       	mov	r9, r1
 7d4:	53 01       	movw	r10, r6
 7d6:	13 c0       	rjmp	.+38     	; 0x7fe <vfprintf+0x154>
 7d8:	28 01       	movw	r4, r16
 7da:	f2 e0       	ldi	r31, 0x02	; 2
 7dc:	4f 0e       	add	r4, r31
 7de:	51 1c       	adc	r5, r1
 7e0:	f8 01       	movw	r30, r16
 7e2:	a0 80       	ld	r10, Z
 7e4:	b1 80       	ldd	r11, Z+1	; 0x01
 7e6:	36 fe       	sbrs	r3, 6
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x146>
 7ea:	69 2d       	mov	r22, r9
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x14a>
 7f0:	6f ef       	ldi	r22, 0xFF	; 255
 7f2:	7f ef       	ldi	r23, 0xFF	; 255
 7f4:	c5 01       	movw	r24, r10
 7f6:	0e 94 41 05 	call	0xa82	; 0xa82 <strnlen>
 7fa:	4c 01       	movw	r8, r24
 7fc:	82 01       	movw	r16, r4
 7fe:	f3 2d       	mov	r31, r3
 800:	ff 77       	andi	r31, 0x7F	; 127
 802:	3f 2e       	mov	r3, r31
 804:	16 c0       	rjmp	.+44     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 806:	28 01       	movw	r4, r16
 808:	22 e0       	ldi	r18, 0x02	; 2
 80a:	42 0e       	add	r4, r18
 80c:	51 1c       	adc	r5, r1
 80e:	f8 01       	movw	r30, r16
 810:	a0 80       	ld	r10, Z
 812:	b1 80       	ldd	r11, Z+1	; 0x01
 814:	36 fe       	sbrs	r3, 6
 816:	03 c0       	rjmp	.+6      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 818:	69 2d       	mov	r22, r9
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	6f ef       	ldi	r22, 0xFF	; 255
 820:	7f ef       	ldi	r23, 0xFF	; 255
 822:	c5 01       	movw	r24, r10
 824:	0e 94 36 05 	call	0xa6c	; 0xa6c <strnlen_P>
 828:	4c 01       	movw	r8, r24
 82a:	f3 2d       	mov	r31, r3
 82c:	f0 68       	ori	r31, 0x80	; 128
 82e:	3f 2e       	mov	r3, r31
 830:	82 01       	movw	r16, r4
 832:	33 fc       	sbrc	r3, 3
 834:	1b c0       	rjmp	.+54     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 836:	82 2d       	mov	r24, r2
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	88 16       	cp	r8, r24
 83c:	99 06       	cpc	r9, r25
 83e:	b0 f4       	brcc	.+44     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 840:	b6 01       	movw	r22, r12
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 84a:	2a 94       	dec	r2
 84c:	f4 cf       	rjmp	.-24     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 84e:	f5 01       	movw	r30, r10
 850:	37 fc       	sbrc	r3, 7
 852:	85 91       	lpm	r24, Z+
 854:	37 fe       	sbrs	r3, 7
 856:	81 91       	ld	r24, Z+
 858:	5f 01       	movw	r10, r30
 85a:	b6 01       	movw	r22, r12
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 862:	21 10       	cpse	r2, r1
 864:	2a 94       	dec	r2
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	82 1a       	sub	r8, r18
 86a:	91 08       	sbc	r9, r1
 86c:	81 14       	cp	r8, r1
 86e:	91 04       	cpc	r9, r1
 870:	71 f7       	brne	.-36     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 872:	e8 c0       	rjmp	.+464    	; 0xa44 <__stack+0x145>
 874:	84 36       	cpi	r24, 0x64	; 100
 876:	11 f0       	breq	.+4      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 878:	89 36       	cpi	r24, 0x69	; 105
 87a:	41 f5       	brne	.+80     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 87c:	f8 01       	movw	r30, r16
 87e:	37 fe       	sbrs	r3, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	07 2e       	mov	r0, r23
 896:	00 0c       	add	r0, r0
 898:	88 0b       	sbc	r24, r24
 89a:	99 0b       	sbc	r25, r25
 89c:	0e 5f       	subi	r16, 0xFE	; 254
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	f3 2d       	mov	r31, r3
 8a2:	ff 76       	andi	r31, 0x6F	; 111
 8a4:	3f 2e       	mov	r3, r31
 8a6:	97 ff       	sbrs	r25, 7
 8a8:	09 c0       	rjmp	.+18     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	f0 68       	ori	r31, 0x80	; 128
 8ba:	3f 2e       	mov	r3, r31
 8bc:	2a e0       	ldi	r18, 0x0A	; 10
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	a3 01       	movw	r20, r6
 8c2:	0e 94 88 05 	call	0xb10	; 0xb10 <__ultoa_invert>
 8c6:	88 2e       	mov	r8, r24
 8c8:	86 18       	sub	r8, r6
 8ca:	45 c0       	rjmp	.+138    	; 0x956 <__stack+0x57>
 8cc:	85 37       	cpi	r24, 0x75	; 117
 8ce:	31 f4       	brne	.+12     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d0:	23 2d       	mov	r18, r3
 8d2:	2f 7e       	andi	r18, 0xEF	; 239
 8d4:	b2 2e       	mov	r11, r18
 8d6:	2a e0       	ldi	r18, 0x0A	; 10
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	25 c0       	rjmp	.+74     	; 0x926 <__stack+0x27>
 8dc:	93 2d       	mov	r25, r3
 8de:	99 7f       	andi	r25, 0xF9	; 249
 8e0:	b9 2e       	mov	r11, r25
 8e2:	8f 36       	cpi	r24, 0x6F	; 111
 8e4:	c1 f0       	breq	.+48     	; 0x916 <__stack+0x17>
 8e6:	18 f4       	brcc	.+6      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8e8:	88 35       	cpi	r24, 0x58	; 88
 8ea:	79 f0       	breq	.+30     	; 0x90a <__stack+0xb>
 8ec:	b5 c0       	rjmp	.+362    	; 0xa58 <__stack+0x159>
 8ee:	80 37       	cpi	r24, 0x70	; 112
 8f0:	19 f0       	breq	.+6      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8f2:	88 37       	cpi	r24, 0x78	; 120
 8f4:	21 f0       	breq	.+8      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8f6:	b0 c0       	rjmp	.+352    	; 0xa58 <__stack+0x159>
 8f8:	e9 2f       	mov	r30, r25
 8fa:	e0 61       	ori	r30, 0x10	; 16
 8fc:	be 2e       	mov	r11, r30
 8fe:	b4 fe       	sbrs	r11, 4
 900:	0d c0       	rjmp	.+26     	; 0x91c <__stack+0x1d>
 902:	fb 2d       	mov	r31, r11
 904:	f4 60       	ori	r31, 0x04	; 4
 906:	bf 2e       	mov	r11, r31
 908:	09 c0       	rjmp	.+18     	; 0x91c <__stack+0x1d>
 90a:	34 fe       	sbrs	r3, 4
 90c:	0a c0       	rjmp	.+20     	; 0x922 <__stack+0x23>
 90e:	29 2f       	mov	r18, r25
 910:	26 60       	ori	r18, 0x06	; 6
 912:	b2 2e       	mov	r11, r18
 914:	06 c0       	rjmp	.+12     	; 0x922 <__stack+0x23>
 916:	28 e0       	ldi	r18, 0x08	; 8
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0x27>
 91c:	20 e1       	ldi	r18, 0x10	; 16
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
 922:	20 e1       	ldi	r18, 0x10	; 16
 924:	32 e0       	ldi	r19, 0x02	; 2
 926:	f8 01       	movw	r30, r16
 928:	b7 fe       	sbrs	r11, 7
 92a:	07 c0       	rjmp	.+14     	; 0x93a <__stack+0x3b>
 92c:	60 81       	ld	r22, Z
 92e:	71 81       	ldd	r23, Z+1	; 0x01
 930:	82 81       	ldd	r24, Z+2	; 0x02
 932:	93 81       	ldd	r25, Z+3	; 0x03
 934:	0c 5f       	subi	r16, 0xFC	; 252
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	06 c0       	rjmp	.+12     	; 0x946 <__stack+0x47>
 93a:	60 81       	ld	r22, Z
 93c:	71 81       	ldd	r23, Z+1	; 0x01
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 5f       	subi	r16, 0xFE	; 254
 944:	1f 4f       	sbci	r17, 0xFF	; 255
 946:	a3 01       	movw	r20, r6
 948:	0e 94 88 05 	call	0xb10	; 0xb10 <__ultoa_invert>
 94c:	88 2e       	mov	r8, r24
 94e:	86 18       	sub	r8, r6
 950:	fb 2d       	mov	r31, r11
 952:	ff 77       	andi	r31, 0x7F	; 127
 954:	3f 2e       	mov	r3, r31
 956:	36 fe       	sbrs	r3, 6
 958:	0d c0       	rjmp	.+26     	; 0x974 <__stack+0x75>
 95a:	23 2d       	mov	r18, r3
 95c:	2e 7f       	andi	r18, 0xFE	; 254
 95e:	a2 2e       	mov	r10, r18
 960:	89 14       	cp	r8, r9
 962:	58 f4       	brcc	.+22     	; 0x97a <__stack+0x7b>
 964:	34 fe       	sbrs	r3, 4
 966:	0b c0       	rjmp	.+22     	; 0x97e <__stack+0x7f>
 968:	32 fc       	sbrc	r3, 2
 96a:	09 c0       	rjmp	.+18     	; 0x97e <__stack+0x7f>
 96c:	83 2d       	mov	r24, r3
 96e:	8e 7e       	andi	r24, 0xEE	; 238
 970:	a8 2e       	mov	r10, r24
 972:	05 c0       	rjmp	.+10     	; 0x97e <__stack+0x7f>
 974:	b8 2c       	mov	r11, r8
 976:	a3 2c       	mov	r10, r3
 978:	03 c0       	rjmp	.+6      	; 0x980 <__stack+0x81>
 97a:	b8 2c       	mov	r11, r8
 97c:	01 c0       	rjmp	.+2      	; 0x980 <__stack+0x81>
 97e:	b9 2c       	mov	r11, r9
 980:	a4 fe       	sbrs	r10, 4
 982:	0f c0       	rjmp	.+30     	; 0x9a2 <__stack+0xa3>
 984:	fe 01       	movw	r30, r28
 986:	e8 0d       	add	r30, r8
 988:	f1 1d       	adc	r31, r1
 98a:	80 81       	ld	r24, Z
 98c:	80 33       	cpi	r24, 0x30	; 48
 98e:	21 f4       	brne	.+8      	; 0x998 <__stack+0x99>
 990:	9a 2d       	mov	r25, r10
 992:	99 7e       	andi	r25, 0xE9	; 233
 994:	a9 2e       	mov	r10, r25
 996:	09 c0       	rjmp	.+18     	; 0x9aa <__stack+0xab>
 998:	a2 fe       	sbrs	r10, 2
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <__stack+0xa9>
 99c:	b3 94       	inc	r11
 99e:	b3 94       	inc	r11
 9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0xab>
 9a2:	8a 2d       	mov	r24, r10
 9a4:	86 78       	andi	r24, 0x86	; 134
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__stack+0xab>
 9a8:	b3 94       	inc	r11
 9aa:	a3 fc       	sbrc	r10, 3
 9ac:	11 c0       	rjmp	.+34     	; 0x9d0 <__stack+0xd1>
 9ae:	a0 fe       	sbrs	r10, 0
 9b0:	06 c0       	rjmp	.+12     	; 0x9be <__stack+0xbf>
 9b2:	b2 14       	cp	r11, r2
 9b4:	88 f4       	brcc	.+34     	; 0x9d8 <__stack+0xd9>
 9b6:	28 0c       	add	r2, r8
 9b8:	92 2c       	mov	r9, r2
 9ba:	9b 18       	sub	r9, r11
 9bc:	0e c0       	rjmp	.+28     	; 0x9da <__stack+0xdb>
 9be:	b2 14       	cp	r11, r2
 9c0:	60 f4       	brcc	.+24     	; 0x9da <__stack+0xdb>
 9c2:	b6 01       	movw	r22, r12
 9c4:	80 e2       	ldi	r24, 0x20	; 32
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 9cc:	b3 94       	inc	r11
 9ce:	f7 cf       	rjmp	.-18     	; 0x9be <__stack+0xbf>
 9d0:	b2 14       	cp	r11, r2
 9d2:	18 f4       	brcc	.+6      	; 0x9da <__stack+0xdb>
 9d4:	2b 18       	sub	r2, r11
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
 9d8:	98 2c       	mov	r9, r8
 9da:	21 2c       	mov	r2, r1
 9dc:	a4 fe       	sbrs	r10, 4
 9de:	10 c0       	rjmp	.+32     	; 0xa00 <__stack+0x101>
 9e0:	b6 01       	movw	r22, r12
 9e2:	80 e3       	ldi	r24, 0x30	; 48
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 9ea:	a2 fe       	sbrs	r10, 2
 9ec:	17 c0       	rjmp	.+46     	; 0xa1c <__stack+0x11d>
 9ee:	a1 fc       	sbrc	r10, 1
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <__stack+0xf9>
 9f2:	88 e7       	ldi	r24, 0x78	; 120
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__stack+0xfd>
 9f8:	88 e5       	ldi	r24, 0x58	; 88
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	b6 01       	movw	r22, r12
 9fe:	0c c0       	rjmp	.+24     	; 0xa18 <__stack+0x119>
 a00:	8a 2d       	mov	r24, r10
 a02:	86 78       	andi	r24, 0x86	; 134
 a04:	59 f0       	breq	.+22     	; 0xa1c <__stack+0x11d>
 a06:	a1 fe       	sbrs	r10, 1
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__stack+0x10f>
 a0a:	8b e2       	ldi	r24, 0x2B	; 43
 a0c:	01 c0       	rjmp	.+2      	; 0xa10 <__stack+0x111>
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	a7 fc       	sbrc	r10, 7
 a12:	8d e2       	ldi	r24, 0x2D	; 45
 a14:	b6 01       	movw	r22, r12
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 a1c:	89 14       	cp	r8, r9
 a1e:	38 f4       	brcc	.+14     	; 0xa2e <__stack+0x12f>
 a20:	b6 01       	movw	r22, r12
 a22:	80 e3       	ldi	r24, 0x30	; 48
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 a2a:	9a 94       	dec	r9
 a2c:	f7 cf       	rjmp	.-18     	; 0xa1c <__stack+0x11d>
 a2e:	8a 94       	dec	r8
 a30:	f3 01       	movw	r30, r6
 a32:	e8 0d       	add	r30, r8
 a34:	f1 1d       	adc	r31, r1
 a36:	80 81       	ld	r24, Z
 a38:	b6 01       	movw	r22, r12
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 a40:	81 10       	cpse	r8, r1
 a42:	f5 cf       	rjmp	.-22     	; 0xa2e <__stack+0x12f>
 a44:	22 20       	and	r2, r2
 a46:	09 f4       	brne	.+2      	; 0xa4a <__stack+0x14b>
 a48:	42 ce       	rjmp	.-892    	; 0x6ce <vfprintf+0x24>
 a4a:	b6 01       	movw	r22, r12
 a4c:	80 e2       	ldi	r24, 0x20	; 32
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
 a54:	2a 94       	dec	r2
 a56:	f6 cf       	rjmp	.-20     	; 0xa44 <__stack+0x145>
 a58:	f6 01       	movw	r30, r12
 a5a:	86 81       	ldd	r24, Z+6	; 0x06
 a5c:	97 81       	ldd	r25, Z+7	; 0x07
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <__stack+0x165>
 a60:	8f ef       	ldi	r24, 0xFF	; 255
 a62:	9f ef       	ldi	r25, 0xFF	; 255
 a64:	2b 96       	adiw	r28, 0x0b	; 11
 a66:	e2 e1       	ldi	r30, 0x12	; 18
 a68:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__epilogue_restores__>

00000a6c <strnlen_P>:
 a6c:	fc 01       	movw	r30, r24
 a6e:	05 90       	lpm	r0, Z+
 a70:	61 50       	subi	r22, 0x01	; 1
 a72:	70 40       	sbci	r23, 0x00	; 0
 a74:	01 10       	cpse	r0, r1
 a76:	d8 f7       	brcc	.-10     	; 0xa6e <strnlen_P+0x2>
 a78:	80 95       	com	r24
 a7a:	90 95       	com	r25
 a7c:	8e 0f       	add	r24, r30
 a7e:	9f 1f       	adc	r25, r31
 a80:	08 95       	ret

00000a82 <strnlen>:
 a82:	fc 01       	movw	r30, r24
 a84:	61 50       	subi	r22, 0x01	; 1
 a86:	70 40       	sbci	r23, 0x00	; 0
 a88:	01 90       	ld	r0, Z+
 a8a:	01 10       	cpse	r0, r1
 a8c:	d8 f7       	brcc	.-10     	; 0xa84 <strnlen+0x2>
 a8e:	80 95       	com	r24
 a90:	90 95       	com	r25
 a92:	8e 0f       	add	r24, r30
 a94:	9f 1f       	adc	r25, r31
 a96:	08 95       	ret

00000a98 <fputc>:
 a98:	0f 93       	push	r16
 a9a:	1f 93       	push	r17
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	fb 01       	movw	r30, r22
 aa2:	23 81       	ldd	r18, Z+3	; 0x03
 aa4:	21 fd       	sbrc	r18, 1
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <fputc+0x16>
 aa8:	8f ef       	ldi	r24, 0xFF	; 255
 aaa:	9f ef       	ldi	r25, 0xFF	; 255
 aac:	2c c0       	rjmp	.+88     	; 0xb06 <fputc+0x6e>
 aae:	22 ff       	sbrs	r18, 2
 ab0:	16 c0       	rjmp	.+44     	; 0xade <fputc+0x46>
 ab2:	46 81       	ldd	r20, Z+6	; 0x06
 ab4:	57 81       	ldd	r21, Z+7	; 0x07
 ab6:	24 81       	ldd	r18, Z+4	; 0x04
 ab8:	35 81       	ldd	r19, Z+5	; 0x05
 aba:	42 17       	cp	r20, r18
 abc:	53 07       	cpc	r21, r19
 abe:	44 f4       	brge	.+16     	; 0xad0 <fputc+0x38>
 ac0:	a0 81       	ld	r26, Z
 ac2:	b1 81       	ldd	r27, Z+1	; 0x01
 ac4:	9d 01       	movw	r18, r26
 ac6:	2f 5f       	subi	r18, 0xFF	; 255
 ac8:	3f 4f       	sbci	r19, 0xFF	; 255
 aca:	31 83       	std	Z+1, r19	; 0x01
 acc:	20 83       	st	Z, r18
 ace:	8c 93       	st	X, r24
 ad0:	26 81       	ldd	r18, Z+6	; 0x06
 ad2:	37 81       	ldd	r19, Z+7	; 0x07
 ad4:	2f 5f       	subi	r18, 0xFF	; 255
 ad6:	3f 4f       	sbci	r19, 0xFF	; 255
 ad8:	37 83       	std	Z+7, r19	; 0x07
 ada:	26 83       	std	Z+6, r18	; 0x06
 adc:	14 c0       	rjmp	.+40     	; 0xb06 <fputc+0x6e>
 ade:	8b 01       	movw	r16, r22
 ae0:	ec 01       	movw	r28, r24
 ae2:	fb 01       	movw	r30, r22
 ae4:	00 84       	ldd	r0, Z+8	; 0x08
 ae6:	f1 85       	ldd	r31, Z+9	; 0x09
 ae8:	e0 2d       	mov	r30, r0
 aea:	09 95       	icall
 aec:	89 2b       	or	r24, r25
 aee:	e1 f6       	brne	.-72     	; 0xaa8 <fputc+0x10>
 af0:	d8 01       	movw	r26, r16
 af2:	16 96       	adiw	r26, 0x06	; 6
 af4:	8d 91       	ld	r24, X+
 af6:	9c 91       	ld	r25, X
 af8:	17 97       	sbiw	r26, 0x07	; 7
 afa:	01 96       	adiw	r24, 0x01	; 1
 afc:	17 96       	adiw	r26, 0x07	; 7
 afe:	9c 93       	st	X, r25
 b00:	8e 93       	st	-X, r24
 b02:	16 97       	sbiw	r26, 0x06	; 6
 b04:	ce 01       	movw	r24, r28
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	1f 91       	pop	r17
 b0c:	0f 91       	pop	r16
 b0e:	08 95       	ret

00000b10 <__ultoa_invert>:
 b10:	fa 01       	movw	r30, r20
 b12:	aa 27       	eor	r26, r26
 b14:	28 30       	cpi	r18, 0x08	; 8
 b16:	51 f1       	breq	.+84     	; 0xb6c <__ultoa_invert+0x5c>
 b18:	20 31       	cpi	r18, 0x10	; 16
 b1a:	81 f1       	breq	.+96     	; 0xb7c <__ultoa_invert+0x6c>
 b1c:	e8 94       	clt
 b1e:	6f 93       	push	r22
 b20:	6e 7f       	andi	r22, 0xFE	; 254
 b22:	6e 5f       	subi	r22, 0xFE	; 254
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	af 4f       	sbci	r26, 0xFF	; 255
 b2c:	b1 e0       	ldi	r27, 0x01	; 1
 b2e:	3e d0       	rcall	.+124    	; 0xbac <__ultoa_invert+0x9c>
 b30:	b4 e0       	ldi	r27, 0x04	; 4
 b32:	3c d0       	rcall	.+120    	; 0xbac <__ultoa_invert+0x9c>
 b34:	67 0f       	add	r22, r23
 b36:	78 1f       	adc	r23, r24
 b38:	89 1f       	adc	r24, r25
 b3a:	9a 1f       	adc	r25, r26
 b3c:	a1 1d       	adc	r26, r1
 b3e:	68 0f       	add	r22, r24
 b40:	79 1f       	adc	r23, r25
 b42:	8a 1f       	adc	r24, r26
 b44:	91 1d       	adc	r25, r1
 b46:	a1 1d       	adc	r26, r1
 b48:	6a 0f       	add	r22, r26
 b4a:	71 1d       	adc	r23, r1
 b4c:	81 1d       	adc	r24, r1
 b4e:	91 1d       	adc	r25, r1
 b50:	a1 1d       	adc	r26, r1
 b52:	20 d0       	rcall	.+64     	; 0xb94 <__ultoa_invert+0x84>
 b54:	09 f4       	brne	.+2      	; 0xb58 <__ultoa_invert+0x48>
 b56:	68 94       	set
 b58:	3f 91       	pop	r19
 b5a:	2a e0       	ldi	r18, 0x0A	; 10
 b5c:	26 9f       	mul	r18, r22
 b5e:	11 24       	eor	r1, r1
 b60:	30 19       	sub	r19, r0
 b62:	30 5d       	subi	r19, 0xD0	; 208
 b64:	31 93       	st	Z+, r19
 b66:	de f6       	brtc	.-74     	; 0xb1e <__ultoa_invert+0xe>
 b68:	cf 01       	movw	r24, r30
 b6a:	08 95       	ret
 b6c:	46 2f       	mov	r20, r22
 b6e:	47 70       	andi	r20, 0x07	; 7
 b70:	40 5d       	subi	r20, 0xD0	; 208
 b72:	41 93       	st	Z+, r20
 b74:	b3 e0       	ldi	r27, 0x03	; 3
 b76:	0f d0       	rcall	.+30     	; 0xb96 <__ultoa_invert+0x86>
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__ultoa_invert+0x5c>
 b7a:	f6 cf       	rjmp	.-20     	; 0xb68 <__ultoa_invert+0x58>
 b7c:	46 2f       	mov	r20, r22
 b7e:	4f 70       	andi	r20, 0x0F	; 15
 b80:	40 5d       	subi	r20, 0xD0	; 208
 b82:	4a 33       	cpi	r20, 0x3A	; 58
 b84:	18 f0       	brcs	.+6      	; 0xb8c <__ultoa_invert+0x7c>
 b86:	49 5d       	subi	r20, 0xD9	; 217
 b88:	31 fd       	sbrc	r19, 1
 b8a:	40 52       	subi	r20, 0x20	; 32
 b8c:	41 93       	st	Z+, r20
 b8e:	02 d0       	rcall	.+4      	; 0xb94 <__ultoa_invert+0x84>
 b90:	a9 f7       	brne	.-22     	; 0xb7c <__ultoa_invert+0x6c>
 b92:	ea cf       	rjmp	.-44     	; 0xb68 <__ultoa_invert+0x58>
 b94:	b4 e0       	ldi	r27, 0x04	; 4
 b96:	a6 95       	lsr	r26
 b98:	97 95       	ror	r25
 b9a:	87 95       	ror	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	ba 95       	dec	r27
 ba2:	c9 f7       	brne	.-14     	; 0xb96 <__ultoa_invert+0x86>
 ba4:	00 97       	sbiw	r24, 0x00	; 0
 ba6:	61 05       	cpc	r22, r1
 ba8:	71 05       	cpc	r23, r1
 baa:	08 95       	ret
 bac:	9b 01       	movw	r18, r22
 bae:	ac 01       	movw	r20, r24
 bb0:	0a 2e       	mov	r0, r26
 bb2:	06 94       	lsr	r0
 bb4:	57 95       	ror	r21
 bb6:	47 95       	ror	r20
 bb8:	37 95       	ror	r19
 bba:	27 95       	ror	r18
 bbc:	ba 95       	dec	r27
 bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__ultoa_invert+0xa2>
 bc0:	62 0f       	add	r22, r18
 bc2:	73 1f       	adc	r23, r19
 bc4:	84 1f       	adc	r24, r20
 bc6:	95 1f       	adc	r25, r21
 bc8:	a0 1d       	adc	r26, r0
 bca:	08 95       	ret

00000bcc <__prologue_saves__>:
 bcc:	2f 92       	push	r2
 bce:	3f 92       	push	r3
 bd0:	4f 92       	push	r4
 bd2:	5f 92       	push	r5
 bd4:	6f 92       	push	r6
 bd6:	7f 92       	push	r7
 bd8:	8f 92       	push	r8
 bda:	9f 92       	push	r9
 bdc:	af 92       	push	r10
 bde:	bf 92       	push	r11
 be0:	cf 92       	push	r12
 be2:	df 92       	push	r13
 be4:	ef 92       	push	r14
 be6:	ff 92       	push	r15
 be8:	0f 93       	push	r16
 bea:	1f 93       	push	r17
 bec:	cf 93       	push	r28
 bee:	df 93       	push	r29
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
 bf4:	ca 1b       	sub	r28, r26
 bf6:	db 0b       	sbc	r29, r27
 bf8:	0f b6       	in	r0, 0x3f	; 63
 bfa:	f8 94       	cli
 bfc:	de bf       	out	0x3e, r29	; 62
 bfe:	0f be       	out	0x3f, r0	; 63
 c00:	cd bf       	out	0x3d, r28	; 61
 c02:	09 94       	ijmp

00000c04 <__epilogue_restores__>:
 c04:	2a 88       	ldd	r2, Y+18	; 0x12
 c06:	39 88       	ldd	r3, Y+17	; 0x11
 c08:	48 88       	ldd	r4, Y+16	; 0x10
 c0a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c0c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c0e:	7d 84       	ldd	r7, Y+13	; 0x0d
 c10:	8c 84       	ldd	r8, Y+12	; 0x0c
 c12:	9b 84       	ldd	r9, Y+11	; 0x0b
 c14:	aa 84       	ldd	r10, Y+10	; 0x0a
 c16:	b9 84       	ldd	r11, Y+9	; 0x09
 c18:	c8 84       	ldd	r12, Y+8	; 0x08
 c1a:	df 80       	ldd	r13, Y+7	; 0x07
 c1c:	ee 80       	ldd	r14, Y+6	; 0x06
 c1e:	fd 80       	ldd	r15, Y+5	; 0x05
 c20:	0c 81       	ldd	r16, Y+4	; 0x04
 c22:	1b 81       	ldd	r17, Y+3	; 0x03
 c24:	aa 81       	ldd	r26, Y+2	; 0x02
 c26:	b9 81       	ldd	r27, Y+1	; 0x01
 c28:	ce 0f       	add	r28, r30
 c2a:	d1 1d       	adc	r29, r1
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	f8 94       	cli
 c30:	de bf       	out	0x3e, r29	; 62
 c32:	0f be       	out	0x3f, r0	; 63
 c34:	cd bf       	out	0x3d, r28	; 61
 c36:	ed 01       	movw	r28, r26
 c38:	08 95       	ret

00000c3a <_exit>:
 c3a:	f8 94       	cli

00000c3c <__stop_program>:
 c3c:	ff cf       	rjmp	.-2      	; 0xc3c <__stop_program>
